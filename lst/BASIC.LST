     1                                      [map all ./lst/BASIC.MAP]
     2                                      [DEFAULT REL]
     3                                      BITS 64
     4                                  %include "./data/MEM.INC"
     1                              <1> 
     2                              <1> ;Simple char equates
     3                              <1> CR  equ 0Dh
     4                              <1> LF  equ 0Ah
     5                              <1> BSP equ 08h
     6                              <1> SPC equ 20h
     7                              <1> 
     8                              <1> 
     9                              <1> %macro breakpoint 0
    10                              <1>     xchg bx, bx
    11                              <1> %endmacro
    12                              <1> 
    13                              <1> progLineBlockType   equ 0   ;Program Line
    14                              <1> varBlockType        equ 1   ;Variable block
    15                              <1> datBlockType        equ 2   ;Data block (i.e. a string block)
    16                              <1> 
    17                              <1> notLastMemBlock equ "t" ;Used for blocks that are not the last block
    18                              <1> lastMemBlock    equ "r" ;Used by the last block to indicate end of chain
    19                              <1> 
    20                              <1> %macro memBlockM 0 ;Memory block Macro
    21                              <1>     .bSignature resb 1      ;Valid Signature
    22                              <1>     .wBlockSize resw 1      ;Total block size in bytes
    23                              <1>     .bBlockType resb 1      ;Block type, program line, variable or string
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> struc memBlock
    27                              <1>     memBlockM
    21 00000000 ??                  <2>  .bSignature resb 1
    22 00000001 ????                <2>  .wBlockSize resw 1
    23 00000003 ??                  <2>  .bBlockType resb 1
    28                              <1> endstruc
    29                              <1> 
    30                              <1> struc progLineBlock
    31                              <1>     memBlockM               ;Common memory block header
    21 00000000 ??                  <2>  .bSignature resb 1
    22 00000001 ????                <2>  .wBlockSize resw 1
    23 00000003 ??                  <2>  .bBlockType resb 1
    32 00000004 ????                <1>     .wLineNum   resw 1      ;Line number, up to 65535
    33 00000006 ????????????????    <1>     .qPtr       resq 1      ;Pointer to the next line, or -1 if last line
    34 0000000E <res 100h>          <1>     .sLine      resb maxLineLen  ;Maximum length 255, keep null char but 
    35                              <1>     ;                             NOT LINE NUMBER OR PRECEEDING SPACES
    36                              <1> endstruc
    37                              <1> 
    38                              <1> struc varBlock
    39                              <1>     memBlockM               ;Common memory block header
    21 00000000 ??                  <2>  .bSignature resb 1
    22 00000001 ????                <2>  .wBlockSize resw 1
    23 00000003 ??                  <2>  .bBlockType resb 1
    40 00000004 ????????????????    <1>     .qValue     resq 1      ;One value qword
    41                              <1>     .sVarName:              ;Up to 40 chars for the var name
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc stringBlock
    45                              <1>     memBlockM
    21 00000000 ??                  <2>  .bSignature resb 1
    22 00000001 ????                <2>  .wBlockSize resw 1
    23 00000003 ??                  <2>  .bBlockType resb 1
    46 00000004 <res 100h>          <1>     .string     resb maxLineLen    ;Strings allocate 256 chars
    47                              <1>     .sVarName:              ;Up to 40 chars for the var name
    48                              <1> endstruc
    49                              <1> 
    50                              <1> ;Variable equates
    51                              <1> intEquate   equ 0
    52                              <1> strEquate   equ 1
    53                              <1> 
    54                              <1> ;State byte equates
    55                              <1> breakBit    equ 1    ;Set means on
    56                              <1> traceBit    equ 2    ;Set means TRON, Clear means TROFF
    57                              <1> indirectBit equ 4    ;Set means indirect/program mode, Clear means direct/line mode
    58                              <1> ctrlFlow    equ 8    ;Set means do not find other expression on current line
    59                              <1> 
    60                              <1> ;Control Instruction Signatures
    61                              <1> WHILEsig    equ 055h
    62                              <1> FORsig      equ 05Ah
    63                              <1> GOSUBsig    equ 0A5h
    64                              <1> ;Control stack data structures
    65                              <1> 
    66                              <1> struc forStruct
    67 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword (see function description)
    68 00000008 ????????????????    <1>     .cntrPtr    resq 1  ;Pointer to counter variable
    69 00000010 ????????????????    <1>     .limitValue resq 1  ;At what value, or after, do we stop the loop 
    70 00000018 ????????????????    <1>     .stepValue  resq 1  ;By how much do we increase on each iteration
    71                              <1> ;Special qword:
    72                              <1> ; Byte 7 = Offset into the line for next instruction after FOR
    73                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
    74                              <1> ; Byte 4 = Offset into the line for next instruction after NEXT
    75                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
    76                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    77                              <1> ; Byte 0 = FOR signature
    78                              <1> endstruc
    79                              <1> 
    80                              <1> struc whileStruct
    81 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    82                              <1> ;Special qword:
    83                              <1> ; Byte 7 = Offset into the line for the condition to evaluate
    84                              <1> ; Bytes[6:5] = Line number of WHILE 
    85                              <1> ; Byte 4 = Offset in line for either first : after WEND or ASCII NULL (end of line)
    86                              <1> ; Bytes[3:2] = Line number of WEND
    87                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    88                              <1> ; Byte 0 = WHILE signature
    89                              <1> endstruc
    90                              <1> 
    91                              <1> struc gosubStruct
    92 00000000 ????????????????    <1>     .specQword  resq 1  ;Special qword
    93                              <1> ;Special qword:
    94                              <1> ; Byte 7 =  Offset in line for either first : after GOSUB or ASCII NULL (end of line)
    95                              <1> ; Bytes[6:5] = Line number of GOSUB 
    96                              <1> ; Bytes[4:2] = 055AA55h space filler signature
    97                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
    98                              <1> ; Byte 0 = GOSUB signature
    99                              <1> endstruc
   100                              <1> 
   101                              <1> ;Stack based macros
   102                              <1> %macro makeSpaceOnStack 1
   103                              <1>     ;The argument is to specify how much space to make on the stack
   104                              <1>     ;It will check to ensure that we dont go past the stack minimum.
   105                              <1>     ;If we do, call stack overflow!
   106                              <1>     pop rax    ;Get the return address qword into rax
   107                              <1>     shl %1, 3  ;Multiply argument register by 8
   108                              <1>     sub rsp, %1 ;Clear space on the stack plus one qword for ret addr
   109                              <1>     lea rbp, stack
   110                              <1>     cmp rsp, rbp
   111                              <1>     ja .macroNotOverflow ;If rsp above overflow buffer, its oki
   112                              <1>     lea rbp, stkOvflw
   113                              <1>     jmp criticalError
   114                              <1> .macroNotOverflow:
   115                              <1>     ;rsp now points to the start of the cleared space
   116                              <1>     ;Put the return address back on the stack
   117                              <1>     push rax
   118                              <1> %endmacro
   119                              <1> 
   120                              <1> %macro cleanSpaceOnStack 1
   121                              <1>     ;The argument is to specify how much space to reclaim from the stack
   122                              <1>     pop rax
   123                              <1>     shl %1, 3   ;Multiply argument register by 8
   124                              <1>     add rsp, %1
   125                              <1>     push rax
   126                              <1> %endmacro
     5                                  Segment .text align=1 valign=1
     6                                  %include "./src/MAIN.ASM"
     1                              <1> start:
     2 00000000 E801020000          <1>     call ttyClear   ;Clear the teletype
     3                              <1>     ;Memory stuff
     4 00000005 488D2D99150000      <1>     lea rbp, mainmsg
     5 0000000C E8CB010000          <1>     call ttyOutString
     6 00000011 488D2DA4150000      <1>     lea rbp, cpyrt
     7 00000018 E8BF010000          <1>     call ttyOutString
     8 0000001D 4889E5              <1>     mov rbp, rsp    ;Pass the original stack pointer to the function
     9 00000020 E85A150000          <1>     call memoryDetection
    10 00000025 488D2DCC150000      <1>     lea rbp, bytemsg
    11 0000002C E8AB010000          <1>     call ttyOutString
    12 00000031 488D25(900D0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    13 00000038 E8C4090000          <1>     call newProgram         ;Use this to reset program pointers
    14 0000003D C605(D90E0000)00    <1>     mov byte [stateByte], 0 ;Init the byte to 0
    15                              <1>     
    16 00000044 488D15BA000000      <1>     lea rdx, ctrlBreakHandler
    17 0000004B B023                <1>     mov al, 23h         ;CTRL+C handler
    18 0000004D E8BC000000          <1>     call setHandler
    19                              <1> mainLoop:
    20                              <1> ;Entering here resets the program counter but doesnt remove the program from memory
    21 00000052 668B05(F20E0000)    <1>     mov ax, word [firstLinNum]  ;Error occured, restart the program counter
    22 00000059 668905(F40E0000)    <1>     mov word [currentLine], ax
    23                              <1> 
    24 00000060 FC                  <1>     cld                 ;Set default string op direction
    25 00000061 488D25(900D0000)    <1>     lea rsp, stacktop    ;Reinitialize stack pointer
    26 00000068 8025(D90E0000)FE    <1>     and byte [stateByte], 0FEh  ;Clear the break bit
    27 0000006F 488D2D2A150000      <1>     lea rbp, prompt
    28 00000076 E861010000          <1>     call ttyOutString
    29 0000007B 488D05D0FFFFFF      <1>     lea rax, mainLoop
    30 00000082 50                  <1>     push rax    ;Save address on stack
    31                              <1> .ml0:
    32                              <1> ;This section will execute an input line if it is an interactive expression
    33                              <1> ; or store it in the program if it has a line number.
    34                              <1> ;It will keep accepting lines until a line is entered without a line number
    35 00000083 E88B000000          <1>     call getLineInput
    36 00000088 488D35(980D0000)    <1>     lea rsi, inString   ;Point to the string for the below!
    37 0000008F E80D120000          <1>     call decimalToHex   ;Check to see if we have a valid line number
    38 00000094 6685C0              <1>     test ax, ax
    39 00000097 750C                <1>     jnz .saveLine
    40                              <1> ;Here we execute the line, move rsi to the start of the line
    41 00000099 488D35(980D0000)    <1>     lea rsi, inString
    42 000000A0 E9DC010000          <1>     jmp runLine
    43                              <1> .saveLine:
    44                              <1>     ;ax has the line number
    45 000000A5 6689C2              <1>     mov dx, ax
    46 000000A8 E862130000          <1>     call searchForProgramLine
    47 000000AD 4881FBFFFFFFFF      <1>     cmp rbx, -1
    48 000000B4 751D                <1>     jne .commonProc ;If not equal, line must exist, continue
    49 000000B6 E8DF020000          <1>     call spaceSkip  ;Skip all the prceeding spaces
    50 000000BB 803E00              <1>     cmp byte [rsi], 0  ;Is the first non space char the end of the string?
    51 000000BE 742D                <1>     je .lineDoesntExist
    52                              <1>     ;So we have a new line that isn't empty, allocate a new block for this line
    53 000000C0 E87A120000          <1>     call allocateBlock  ;Return a default block in rbx
    54 000000C5 C6430300            <1>     mov byte [rbx + progLineBlock.bBlockType], progLineBlockType
    55 000000C9 66894304            <1>     mov word [rbx + progLineBlock.wLineNum], ax
    56 000000CD 66C743010E01        <1>     mov word [rbx + progLineBlock.wBlockSize], progLineBlock_size
    57                              <1> .commonProc:
    58                              <1>     ;If the line already exists, simply override the stored string
    59                              <1>     ;rbx has a pointer to the block
    60 000000D3 E898140000          <1>     call strlen ;Get the string length
    61 000000D8 488D7B0E            <1>     lea rdi, qword [rbx + progLineBlock.sLine]  ;Get address here
    62 000000DC E886140000          <1>     call strcpy ;Copy the program string to the program block
    63 000000E1 56                  <1>     push rsi
    64 000000E2 4889DE              <1>     mov rsi, rbx    ;Move the block into rsi
    65 000000E5 E849130000          <1>     call insertProgramLine
    66 000000EA 5E                  <1>     pop rsi
    67 000000EB EB96                <1>     jmp short .ml0
    68                              <1> .lineDoesntExist:
    69 000000ED 488D2D7C150000      <1>     lea rbp, lineNoXist
    70                              <1> ;For any error, syntax or otherwise, come here
    71                              <1> criticalError:
    72                              <1> ;Called with rbp pointing at error message
    73 000000F4 E8E3000000          <1>     call ttyOutString
    74 000000F9 C605(D90E0000)00    <1>     mov byte [stateByte], 0 ;Reset the state byte
    75 00000100 E94DFFFFFF          <1>     jmp mainLoop    ;Trash input line, restart line input
    76                              <1> 
    77                              <1> ctrlBreakHandler:
    78 00000105 800D(D90E0000)01    <1>     or byte [stateByte], 1  ;Set the byte
    79 0000010C 48CF                <1>     iretq
    80                              <1> setHandler:
    81                              <1> ;Called with:
    82                              <1> ;   rdx = Pointer to interrupt handler
    83                              <1> ;   al = Interrupt number
    84 0000010E B425                <1>     mov ah, 25h
    85 00000110 CD21                <1>     int 21h
    86 00000112 C3                  <1>     ret
     7                                  %include "./src/TTY.ASM"
     1                              <1> getLineInput:
     2                              <1> ;Null terminates the string that was input, replacing the ending CR!
     3                              <1> ;Parses the input so that all chars are uppercased except those enclosed in speechmarks
     4 00000113 30E4                <1>     xor ah, ah
     5 00000115 8825(D80E0000)      <1>     mov byte [strLen], ah   ;Zero the char counter
     6 0000011B 488D3D(980D0000)    <1>     lea rdi, inString   ;Move to start of line
     7 00000122 4889FE              <1>     mov rsi, rdi
     8 00000125 57                  <1>     push rdi
     9 00000126 B900010000          <1>     mov ecx, maxLineLen
    10 0000012B 30C0                <1>     xor al, al    ;Ensure the input line is sanitised
    11 0000012D F3AA                <1>     rep stosb
    12 0000012F 5F                  <1>     pop rdi
    13 00000130 31C9                <1>     xor ecx, ecx    ;Use cl as a counter for speech marks, which dictates UC-ing chars
    14                              <1> .getChar:
    15 00000132 E8C7000000          <1>     call ttyIn
    16 00000137 3C0D                <1>     cmp al, CR ;Carriage return
    17 00000139 7467                <1>     je .gliExit
    18 0000013B 3C0A                <1>     cmp al, LF
    19 0000013D 74F3                <1>     je .getChar ;Ignore line feed chars
    20 0000013F 3C08                <1>     cmp al, BSP ;Bspace
    21 00000141 7417                <1>     je .glibspace
    22 00000143 803D(D80E0000)FE    <1>     cmp byte [strLen], -2   ;If at max length (255 chars), simply beep and wait for either bspace or enter
    23 0000014A 7466                <1>     je .gliFull 
    24 0000014C 3C22                <1>     cmp al, byte '"'
    25 0000014E 7406                <1>     je .gspchMk
    26 00000150 84C0                <1>     test al, al
    27 00000152 744C                <1>     je .gliExtendedChar
    28 00000154 EB2D                <1>     jmp short .gliCheckCase
    29                              <1> .gspchMk:
    30                              <1> ;Here if a speech mark.
    31 00000156 FEC1                <1>     inc cl      ;Speech mark hit, inc count
    32 00000158 EB29                <1>     jmp short .gliCheckCase
    33                              <1> .glibspace:
    34 0000015A F605(D80E0000)FF    <1>     test byte [strLen], -1  ;This will only be zero if strLen=0
    35 00000161 74CF                <1>     jz .getChar
    36 00000163 48FFCF              <1>     dec rdi ;Go back by one position in the input line
    37 00000166 FE0D(D80E0000)      <1>     dec byte [strLen]
    38 0000016C B008                <1>     mov al, BSP
    39 0000016E E85D000000          <1>     call ttyOutChar
    40 00000173 B020                <1>     mov al, SPC  
    41 00000175 E856000000          <1>     call ttyOutChar
    42 0000017A B008                <1>     mov al, BSP
    43 0000017C E84F000000          <1>     call ttyOutChar
    44 00000181 EBAF                <1>     jmp short .getChar
    45                              <1> .gliCheckCase:
    46                              <1>     ;al has char
    47 00000183 E848000000          <1>     call ttyOutChar ;Echo the char as is, but store it uppercase if cl is even
    48 00000188 F6C101              <1>     test cl, 1      ;UC char if cl is even only
    49 0000018B 750A                <1>     jnz .gStore
    50 0000018D 3C61                <1>     cmp al, "a"
    51 0000018F 7206                <1>     jb .gStore
    52 00000191 3C7A                <1>     cmp al, "z"
    53 00000193 7702                <1>     ja .gStore
    54 00000195 2C20                <1>     sub al, "a" - "A"
    55                              <1> .gStore:
    56 00000197 AA                  <1>     stosb   ;Increment the pointer, add char to buffer
    57 00000198 FE05(D80E0000)      <1>     inc byte [strLen]   ;Inc char count
    58 0000019E EB92                <1>     jmp short .getChar
    59                              <1> .gliExtendedChar:
    60                              <1>     ;Currently, extended chars do nothing, 
    61                              <1>     ; eventually add F1-F10 functionality
    62                              <1>     ; and arrow key support
    63 000001A0 EB90                <1>     jmp short .getChar
    64                              <1> .gliExit:
    65 000001A2 488D2D5D140000      <1>     lea rbp, crlf
    66 000001A9 E82E000000          <1>     call ttyOutString
    67 000001AE C60700              <1>     mov byte [rdi], 0   ;Null terminate string here
    68 000001B1 C3                  <1>     ret
    69                              <1> .gliFull:
    70 000001B2 B007                <1>     mov al, 07h
    71 000001B4 E817000000          <1>     call ttyOutChar
    72 000001B9 E974FFFFFF          <1>     jmp .getChar
    73                              <1> 
    74                              <1> ucChar:
    75                              <1> ;Input: al = Char to uppercase
    76                              <1> ;Output: al = Adjusted char 
    77 000001BE 53                  <1>     push rbx
    78 000001BF 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
    79 000001C2 50                  <1>     push rax    ;Push the char twice on the stack
    80 000001C3 50                  <1>     push rax
    81 000001C4 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
    82 000001C9 CD2F                <1>     int 2fh         ;Returns the processed char in al
    83 000001CB 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
    84 000001CE 5B                  <1>     pop rbx
    85 000001CF C3                  <1>     ret
    86                              <1> 
    87                              <1> ttyOutChar:
    88 000001D0 52                  <1>     push rdx
    89 000001D1 88C2                <1>     mov dl, al
    90 000001D3 B800020000          <1>     mov eax, 0200h   ;Output char!
    91 000001D8 CD21                <1>     int 21h
    92 000001DA 5A                  <1>     pop rdx
    93 000001DB C3                  <1>     ret
    94                              <1> ttyOutString:
    95                              <1> ;Print 0 terminated strings
    96                              <1> ;Input: rbp -> String
    97 000001DC 53                  <1>     push rbx
    98 000001DD 51                  <1>     push rcx
    99 000001DE 52                  <1>     push rdx
   100 000001DF 56                  <1>     push rsi
   101 000001E0 4889EE              <1>     mov rsi, rbp
   102 000001E3 E888130000          <1>     call strlen     ;Get the length of the string to print in ecx
   103 000001E8 FFC9                <1>     dec ecx         ;Drop the terminating null
   104 000001EA 4889EA              <1>     mov rdx, rbp    ;Get string ptr
   105 000001ED BB01000000          <1>     mov ebx, 1      ;STDOUT
   106 000001F2 B800400000          <1>     mov eax, 4000h  ;Write!
   107 000001F7 CD21                <1>     int 21h 
   108 000001F9 5E                  <1>     pop rsi    
   109 000001FA 5A                  <1>     pop rdx
   110 000001FB 59                  <1>     pop rcx
   111 000001FC 5B                  <1>     pop rbx
   112 000001FD C3                  <1>     ret
   113                              <1> ttyIn:
   114                              <1> ;Output: al -> ASCII char
   115 000001FE B800080000          <1>     mov eax, 0800h  ;Input no echo to tty
   116 00000203 CD21                <1>     int 21h
   117 00000205 C3                  <1>     ret
   118                              <1> ttyClear:
   119                              <1> ;Use Int 2Eh to get command.com to violate the hardware abstraction for us.
   120                              <1> ;Or just add ANSI clear code to our basic driver (probably easier...)
   121 00000206 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   122 0000020B CD30                <1>     int 30h
   123 0000020D B402                <1>     mov ah, 02h
   124 0000020F 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   125 00000211 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   126 00000213 CD30                <1>     int 30h
   127 00000215 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   128 00000217 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   129 0000021C CD30                <1>     int 30h
   130 0000021E C3                  <1>     ret
     8                                  %include "./src/PROCESS.ASM"
     1                              <1> keywordParser:
     2                              <1> ;rsi must point to the start of the portion of the line to execute
     3 0000021F E876010000          <1>     call spaceSkip  ;Skip any leading spaces
     4 00000224 803E00              <1>     cmp byte [rsi], 0   ;Null terminated line, empty line?
     5 00000227 7444                <1>     je .exitEmpty
     6                              <1>     ;rsi now points to function
     7 00000229 488D3DD7050000      <1>     lea rdi, funTbl     ;Point rdi to the function table
     8                              <1> .functionFinderLoop:
     9 00000230 0FB60F              <1>     movzx ecx, byte [rdi]  ;Get the string length  
    10 00000233 80F9FF              <1>     cmp cl, -1  ;-1 is the end of table marker, either Var assignment or error
    11 00000236 7440                <1>     je .notLetVarAssignment ;No key word found, consider variable assignment
    12 00000238 56                  <1>     push rsi    ;Save ptr to start of string on stack 
    13 00000239 57                  <1>     push rdi
    14 0000023A 48FFC7              <1>     inc rdi             ;Goto first char in function name
    15 0000023D F3A6                <1>     repe cmpsb
    16 0000023F 5F                  <1>     pop rdi
    17 00000240 5E                  <1>     pop rsi     ;Return ptr to start of string pointer from stack
    18 00000241 84C9                <1>     test cl, cl ;Did all the chars match?
    19 00000243 740F                <1>     jz .functionFound
    20 00000245 480FB607            <1>     movzx rax, byte [rdi]    ;Skip unnecessary function pointer
    21 00000249 480502000000        <1>     add rax, 2      ;Add 2 to skip relative pointer
    22 0000024F 4801C7              <1>     add rdi, rax
    23 00000252 EBDC                <1>     jmp short .functionFinderLoop
    24                              <1> .functionFound:
    25                              <1>     ;Function found! Execute!
    26                              <1>     ;rsi points to start of expression to evaluate for function
    27                              <1>     ;rdi points to table entry
    28 00000254 488D1DAC050000      <1>     lea rbx, funTbl         ;Get table address
    29 0000025B 480FB617            <1>     movzx rdx, byte [rdi]   ;Get pascal string length
    30 0000025F 0FB70C17            <1>     movzx ecx, word [rdi + rdx] ;Add pascal strlen to table entry and get word offset
    31 00000263 4801CB              <1>     add rbx, rcx    ;Add word offset to table base
    32 00000266 48FFCA              <1>     dec rdx         ;Get number of chars in function name
    33 00000269 4801D6              <1>     add rsi, rdx    ;rsi points to first char AFTER function name
    34                              <1> .exit:
    35 0000026C C3                  <1>     ret 
    36                              <1> .exitEmpty:
    37 0000026D 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    37 00000276 FF                  <1>
    38 00000277 C3                  <1>     ret
    39                              <1>     ;rbx has the function pointer, 
    40                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    41                              <1> .notLetVarAssignment:
    42 00000278 488D1D04070000      <1>     lea rbx, variableAssignment
    43 0000027F EBEB                <1>     jmp short .exit  ;Now call the function as if it was found from the table
    44                              <1> 
    45                              <1> runLine:
    46                              <1> ;New lines begin here, rsi point to the start of the program line
    47 00000281 F605(D90E0000)02    <1>     test byte [stateByte], traceBit ;Are we TRON?
    48 00000288 0F85B0000000        <1>     jnz .tron
    49                              <1> .stringPortionProcess:
    50                              <1>     ;rsi points to string portion to begin processing
    51 0000028E E88CFFFFFF          <1>     call keywordParser
    52                              <1>     ;rbx has the function pointer, if rbx is -1, line was empty
    53                              <1>     ;rsi points to the first char after the keyword (e.g. PRINT, INPUT etc)
    54 00000293 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If the line is empty, rbx has a -1 so skip the line
    55 0000029A 7437                <1>     je .gotoNextLine
    56 0000029C F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set before exec?
    57 000002A3 0F85C1000000        <1>     jnz .break
    58                              <1> ;EXEC   LINE    PORTION
    59 000002A9 FFD3                <1>     call rbx        ;Call the function pointer in rbx
    60                              <1>     ;rsi should be pointing to the next portion of the line or the end of the line
    61                              <1> ;EXEC COMPLETE
    62 000002AB F605(D90E0000)01    <1>     test byte [stateByte], breakBit ;Is break set after exec?
    63 000002B2 0F85B2000000        <1>     jnz .break
    64 000002B8 F605(D90E0000)04    <1>     test byte [stateByte], indirectBit
    65 000002BF 7448                <1>     jz .exit    ;IF in direct mode, just return to command line
    66 000002C1 F605(D90E0000)08    <1>     test byte [stateByte], ctrlFlow ;Ctrl Flow =>ignore other expressions temporarily
    67 000002C8 7540                <1>     jnz .ctrlFlowHandler
    68                              <1> 
    69 000002CA E82E050000          <1>     call findOtherExpressionsOnLine ;See if there are any other expressions
    70 000002CF 84C0                <1>     test al, al ;If al is null, no more expressions on the line
    71                              <1>     ;If not null, keep executing expressions on same line
    72                              <1>     ;rsi points to first char after :
    73 000002D1 75BB                <1>     jnz .stringPortionProcess ;If a : found, keep processing
    74                              <1> .gotoNextLine:
    75 000002D3 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;Get in rbx the ptr to current line
    76 000002DA E830110000          <1>     call searchForProgramLine
    77 000002DF 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
    78 000002E6 7421                <1>     je .exit
    79 000002E8 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain
    80 000002EC 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Are we at the end of the chain?
    81 000002F3 7414                <1>     je .exit
    82 000002F5 668B5304            <1>     mov dx, word [rbx + progLineBlock.wLineNum] ;Save the new line number
    83 000002F9 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
    84                              <1> .gotoNextLineCommon:
    85 000002FD 668915(F40E0000)    <1>     mov word [currentLine], dx
    86 00000304 E978FFFFFF          <1>     jmp runLine
    87                              <1> .exit:
    88 00000309 C3                  <1>     ret
    89                              <1> .ctrlFlowHandler:
    90                              <1>     ;The stack pointer should be pointing now at the block
    91                              <1>     ; control flow data block. 
    92                              <1>     ;The functions which return with this bit set, also have placed
    93                              <1>     ; the next line number in dx, offset into line in byte three of edx
    94 0000030A 8025(D90E0000)F7    <1>     and byte [stateByte], ~ctrlFlow ;First clear the ctrlflow bit
    95 00000311 E8F9100000          <1>     call searchForProgramLine   ;Get pointer to line
    96 00000316 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist?
    97 0000031D 74DE                <1>     je .gotoNextLineCommon
    98 0000031F 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point rsi to the start of the next line
    99 00000323 89D0                <1>     mov eax, edx    ;Isolate the offset into the line
   100 00000325 C1E810              <1>     shr eax, 10h    ;Get byte three into byte 1
   101 00000328 25FF000000          <1>     and eax, 0FFh   ;Save only the bottom byte
   102 0000032D 4801C6              <1>     add rsi, rax    ;Add the offset into the string to rsi
   103 00000330 EBCB                <1>     jmp short .gotoNextLineCommon
   104                              <1> .badLineNumber:
   105 00000332 488D2D37130000      <1>     lea rbp, lineNoXist
   106 00000339 E9B6FDFFFF          <1>     jmp criticalError
   107                              <1> 
   108                              <1> .tron:
   109                              <1> ;Print the line number about to be executed
   110 0000033E F605(D90E0000)04    <1>     test byte [stateByte], indirectBit  ;Tron should only work in indirect mode
   111 00000345 0F8443FFFFFF        <1>     jz .stringPortionProcess
   112 0000034B B05B                <1>     mov al, "["
   113 0000034D E87EFEFFFF          <1>     call ttyOutChar
   114 00000352 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   115 00000359 E86B0F0000          <1>     call printdecimalword
   116 0000035E B05D                <1>     mov al, "]"
   117 00000360 E86BFEFFFF          <1>     call ttyOutChar
   118 00000365 E924FFFFFF          <1>     jmp .stringPortionProcess
   119                              <1> .break:
   120 0000036A 488D2D17130000      <1>     lea rbp, breakmsg
   121 00000371 E866FEFFFF          <1>     call ttyOutString
   122 00000376 0FB705(F40E0000)    <1>     movzx eax, word [currentLine]
   123 0000037D E8470F0000          <1>     call printdecimalword
   124 00000382 488D2D7D120000      <1>     lea rbp, crlf
   125 00000389 E84EFEFFFF          <1>     call ttyOutString
   126                              <1>     ;Preserve only bit 2 of the state byte
   127 0000038E 8025(D90E0000)02    <1>     and byte [stateByte], traceBit
   128 00000395 E9B8FCFFFF          <1>     jmp mainLoop    ;Exit processing
     9                                  %include "./src/PARSE.ASM"
     1                              <1> ;Main Parsing Routines go here
     2                              <1> 
     3                              <1> spaceSkip:
     4                              <1> ;Allows us to skip spaces that might have been placed for
     5                              <1> ; ease of reading by the user without modifying any registers
     6                              <1> ; except for rsi.
     7                              <1> ;Input: rsi = Pointer to string
     8                              <1> ;Output: rsi = First non space character encountered
     9 0000039A 803E20              <1>     cmp byte [rsi], " "
    10 0000039D 7505                <1>     jne .exit
    11 0000039F 48FFC6              <1>     inc rsi
    12 000003A2 EBF6                <1>     jmp short spaceSkip
    13                              <1> .exit:
    14 000003A4 C3                  <1>     ret
    15                              <1> 
    16                              <1> getVarNameLength:
    17                              <1> ;Called pointing to the buffer with the var name in it
    18                              <1> ;Input: rsi = Start of var name
    19                              <1> ;Output: ecx = Length of varname
    20 000003A5 50                  <1>     push rax
    21 000003A6 56                  <1>     push rsi
    22 000003A7 57                  <1>     push rdi
    23 000003A8 53                  <1>     push rbx
    24 000003A9 52                  <1>     push rdx
    25 000003AA 31D2                <1>     xor edx, edx    ;Clear counter of chars
    26 000003AC 488D1D68120000      <1>     lea rbx, varChrs    ;Get the list of valid variable name chars
    27                              <1> .search:
    28 000003B3 4889DF              <1>     mov rdi, rbx    ;Save pointer in rbx
    29 000003B6 AC                  <1>     lodsb       ;Get the first char into al
    30 000003B7 B926000000          <1>     mov ecx, numVarChars
    31 000003BC F2AE                <1>     repne scasb       ;Look for char in the valid chars list
    32 000003BE 750A                <1>     jne .exit   ;Char not found, drop it
    33 000003C0 FFC2                <1>     inc edx     ;Add one to number of chars found
    34 000003C2 81FA28000000        <1>     cmp edx, 40 ;At position for char 40?
    35 000003C8 72E9                <1>     jb .search  ;Whilst below, keep going
    36                              <1> .exit:
    37 000003CA 89D1                <1>     mov ecx, edx
    38 000003CC 5A                  <1>     pop rdx
    39 000003CD 5B                  <1>     pop rbx
    40 000003CE 5F                  <1>     pop rdi
    41 000003CF 5E                  <1>     pop rsi
    42 000003D0 58                  <1>     pop rax
    43 000003D1 C3                  <1>     ret
    44                              <1> 
    45                              <1> getVarType:
    46                              <1> ;Input: rsi = Start of var name
    47                              <1> ;       rcx = Length of varname
    48                              <1> ;Output: ebx = 0 => Integer
    49                              <1> ;        ebx = 1 => String
    50                              <1> ;        ebx = -1 => Var doesnt exist, caller handles
    51 000003D2 50                  <1>     push rax
    52 000003D3 51                  <1>     push rcx
    53 000003D4 56                  <1>     push rsi
    54 000003D5 E8C50F0000          <1>     call findVariable
    55 000003DA 4881FBFFFFFFFF      <1>     cmp rbx, -1
    56 000003E1 7406                <1>     je .exit
    57 000003E3 0FB65B03            <1>     movzx ebx, byte [rbx + memBlock.bBlockType]
    58 000003E7 FFCB                <1>     dec ebx
    59                              <1> .exit:
    60 000003E9 5E                  <1>     pop rsi
    61 000003EA 59                  <1>     pop rcx
    62 000003EB 58                  <1>     pop rax
    63 000003EC C3                  <1>     ret
    64                              <1> 
    65                              <1> handleAlgebraicExpression:
    66                              <1> ;Input: rsi = Points to a mathematical expression
    67                              <1> ;Output: rax = Result of said expression
    68                              <1> ;Declares a syntax error if weird chars found
    69                              <1> ;Declares a type error if a string variable found
    70                              <1> ;Declares a stack overflow if less than 20 stack words available
    71 000003ED 50                  <1>     push rax
    72 000003EE 488D05(50000000)    <1>     lea rax, stack
    73 000003F5 480550000000        <1>     add rax, 10*8   ;Be extra careful
    74 000003FB 4839C4              <1>     cmp rsp, rax
    75                              <1>     ;if rsp is below rax, fail
    76 000003FE 0F8275030000        <1>     jb .stack
    77 00000404 58                  <1>     pop rax
    78                              <1> .handleFourthLevel:
    79 00000405 E807010000          <1>     call .handleThirdLevel
    80                              <1> .parseLogicals:
    81 0000040A 813E414E4420        <1>     cmp dword [rsi], "AND "
    82 00000410 0F84B2000000        <1>     je .and
    83 00000416 66813E4F52          <1>     cmp word [rsi], "OR"
    84 0000041B 0F84B6000000        <1>     je .or
    85 00000421 813E584F5220        <1>     cmp dword [rsi], "XOR "
    86 00000427 0F84BC000000        <1>     je .xor
    87 0000042D 813E45515620        <1>     cmp dword [rsi], "EQV "
    88 00000433 0F84BF000000        <1>     je .eqv
    89 00000439 813E494D5020        <1>     cmp dword [rsi], "IMP "
    90 0000043F 7468                <1>     je .imp
    91 00000441 813E524F4C20        <1>     cmp dword [rsi], "ROL "
    92 00000447 744F                <1>     je .leftRoll
    93 00000449 813E524F5220        <1>     cmp dword [rsi], "ROR "
    94 0000044F 7436                <1>     je .rightRoll
    95 00000451 813E53484C20        <1>     cmp dword [rsi], "SHL "
    96 00000457 741D                <1>     je .leftShift
    97 00000459 813E53485220        <1>     cmp dword [rsi], "SHR "
    98 0000045F 0F85E8020000        <1>     jne .exit
    99                              <1> .rightShift:
   100                              <1> ;Shift count is truncated to between 1 and 255 for shift and Roll
   101 00000465 50                  <1>     push rax
   102 00000466 E89F000000          <1>     call .handleThirdLevelSkip
   103 0000046B 59                  <1>     pop rcx
   104 0000046C 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   105 0000046E 48D3E8              <1>     shr rax, cl
   106 00000471 E994FFFFFF          <1>     jmp .parseLogicals
   107                              <1> 
   108                              <1> .leftShift:
   109 00000476 50                  <1>     push rax
   110 00000477 E88E000000          <1>     call .handleThirdLevelSkip
   111 0000047C 59                  <1>     pop rcx
   112 0000047D 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   113 0000047F 48D3E0              <1>     shl rax, cl
   114 00000482 E983FFFFFF          <1>     jmp .parseLogicals
   115                              <1> 
   116                              <1> .rightRoll:
   117 00000487 50                  <1>     push rax
   118 00000488 E87D000000          <1>     call .handleThirdLevelSkip
   119 0000048D 59                  <1>     pop rcx
   120 0000048E 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   121 00000490 48D3C8              <1>     ror rax, cl
   122 00000493 E972FFFFFF          <1>     jmp .parseLogicals
   123                              <1> 
   124                              <1> .leftRoll:
   125 00000498 50                  <1>     push rax
   126 00000499 E86C000000          <1>     call .handleThirdLevelSkip
   127 0000049E 59                  <1>     pop rcx
   128 0000049F 4891                <1>     xchg rax, rcx   ;Move count into rcx, and shift target to rax
   129 000004A1 48D3C0              <1>     rol rax, cl
   130 000004A4 E961FFFFFF          <1>     jmp .parseLogicals
   131                              <1> 
   132                              <1> .imp:
   133                              <1>     ;A => B == ¬A OR B
   134 000004A9 50                  <1>     push rax
   135 000004AA E85B000000          <1>     call .handleThirdLevelSkip
   136 000004AF 59                  <1>     pop rcx ;rcx has A
   137 000004B0 48F7D1              <1>     not rcx
   138 000004B3 4809C8              <1>     or rax, rcx
   139 000004B6 E94FFFFFFF          <1>     jmp .parseLogicals
   140                              <1> 
   141                              <1> .not:
   142 000004BB E84A000000          <1>     call .handleThirdLevelSkip  ;Get result in rax
   143 000004C0 48F7D0              <1>     not rax ;Save 1's compliment in rax
   144 000004C3 E942FFFFFF          <1>     jmp .parseLogicals
   145                              <1> .and:
   146 000004C8 50                  <1>     push rax
   147 000004C9 E83C000000          <1>     call .handleThirdLevelSkip
   148 000004CE 59                  <1>     pop rcx
   149 000004CF 4821C8              <1>     and rax, rcx
   150 000004D2 E933FFFFFF          <1>     jmp .parseLogicals
   151                              <1> .or:
   152 000004D7 48FFCE              <1>     dec rsi ;handle third level skips skips one too many for or
   153 000004DA 50                  <1>     push rax
   154 000004DB E82A000000          <1>     call .handleThirdLevelSkip
   155 000004E0 59                  <1>     pop rcx
   156 000004E1 4809C8              <1>     or rax, rcx
   157 000004E4 E921FFFFFF          <1>     jmp .parseLogicals
   158                              <1> .xor:
   159 000004E9 50                  <1>     push rax
   160 000004EA E81B000000          <1>     call .handleThirdLevelSkip
   161 000004EF 59                  <1>     pop rcx
   162 000004F0 4831C8              <1>     xor rax, rcx
   163 000004F3 E912FFFFFF          <1>     jmp .parseLogicals
   164                              <1> .eqv:
   165                              <1> ;Not XOR, ie only if the two bits are equal do we set it
   166 000004F8 50                  <1>     push rax
   167 000004F9 E80C000000          <1>     call .handleThirdLevelSkip
   168 000004FE 59                  <1>     pop rcx
   169 000004FF 4831C8              <1>     xor rax, rcx
   170 00000502 48F7D0              <1>     not rax
   171 00000505 E900FFFFFF          <1>     jmp .parseLogicals
   172                              <1> 
   173                              <1> ;Level 3, Relational Connectives
   174                              <1> .handleThirdLevelSkip:
   175 0000050A 4881C603000000      <1>     add rsi, 3  ;Go past the end of the word
   176                              <1> .handleThirdLevel:
   177 00000511 E80B010000          <1>    call .handleSecondLevel
   178                              <1> .parseRelationals:
   179                              <1>     ;Handle Relational connectives
   180 00000516 803E3D              <1>     cmp byte [rsi], "="
   181 00000519 0F84BA000000        <1>     je .processEq
   182 0000051F 66813E3C3E          <1>     cmp word [rsi], "<>"
   183 00000524 0F84D0000000        <1>     je .processNeq
   184 0000052A 66813E3E3C          <1>     cmp word [rsi], "><"
   185 0000052F 0F84C5000000        <1>     je .processNeq
   186 00000535 803E3C              <1>     cmp byte [rsi], "<"
   187 00000538 7430                <1>     je .processLess
   188 0000053A 803E3E              <1>     cmp byte [rsi], ">"
   189 0000053D 0F850A020000        <1>     jne .exit
   190                              <1> .processGreater:
   191 00000543 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a GEQ
   192 00000547 7448                <1>     je .processGeq
   193 00000549 50                  <1>     push rax
   194 0000054A E8CF000000          <1>     call .handleSecondLevelSkip
   195 0000054F 59                  <1>     pop rcx ;lhs, rax has rhs of >
   196                              <1> 
   197 00000550 53                  <1>     push rbx
   198 00000551 31DB                <1>     xor ebx, ebx
   199 00000553 4839C1              <1>     cmp rcx, rax
   200 00000556 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   200 0000055F FF                  <1>
   201 00000560 480F4EC3            <1>     cmovle rax, rbx  ;Move the false value if less than
   202 00000564 5B                  <1>     pop rbx
   203 00000565 E9ACFFFFFF          <1>     jmp .parseRelationals
   204                              <1> .processLess:
   205 0000056A 807E013D            <1>     cmp byte [rsi + 1], "=" ;Is this a LEQ
   206 0000056E 7445                <1>     je .processLeq
   207 00000570 50                  <1>     push rax
   208 00000571 E8A8000000          <1>     call .handleSecondLevelSkip
   209 00000576 59                  <1>     pop rcx ;lhs, rax has rhs of <
   210                              <1> 
   211 00000577 53                  <1>     push rbx
   212 00000578 31DB                <1>     xor ebx, ebx
   213 0000057A 4839C1              <1>     cmp rcx, rax
   214 0000057D 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   214 00000586 FF                  <1>
   215 00000587 480F4DC3            <1>     cmovge rax, rbx  ;Move the false value if greater than or equal to
   216 0000058B 5B                  <1>     pop rbx
   217 0000058C E985FFFFFF          <1>     jmp .parseRelationals
   218                              <1> 
   219                              <1> .processGeq:
   220                              <1> ;Symbol has two chars so skip second char
   221 00000591 48FFC6              <1>     inc rsi ;Skip first symbol
   222 00000594 50                  <1>     push rax
   223 00000595 E884000000          <1>     call .handleSecondLevelSkip
   224 0000059A 59                  <1>     pop rcx ;lhs, rax has rhs of >=
   225                              <1> 
   226 0000059B 53                  <1>     push rbx
   227 0000059C 31DB                <1>     xor ebx, ebx
   228 0000059E 4839C1              <1>     cmp rcx, rax
   229 000005A1 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   229 000005AA FF                  <1>
   230 000005AB 480F4CC3            <1>     cmovl rax, rbx  ;Move the false value if less than
   231 000005AF 5B                  <1>     pop rbx
   232 000005B0 E961FFFFFF          <1>     jmp .parseRelationals
   233                              <1> 
   234                              <1> .processLeq:
   235                              <1> ;Symbol has two chars so skip second char
   236 000005B5 48FFC6              <1>     inc rsi
   237 000005B8 50                  <1>     push rax
   238 000005B9 E860000000          <1>     call .handleSecondLevelSkip
   239 000005BE 59                  <1>     pop rcx ;lhs, rax has rhs of <=
   240                              <1> 
   241 000005BF 53                  <1>     push rbx
   242 000005C0 31DB                <1>     xor ebx, ebx
   243 000005C2 4839C1              <1>     cmp rcx, rax
   244 000005C5 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Default to true
   244 000005CE FF                  <1>
   245 000005CF 480F4FC3            <1>     cmovg rax, rbx  ;Move the false value if greater than
   246 000005D3 5B                  <1>     pop rbx
   247 000005D4 E93DFFFFFF          <1>     jmp .parseRelationals
   248                              <1> 
   249                              <1> .processEq:
   250 000005D9 50                  <1>     push rax
   251 000005DA E83F000000          <1>     call .handleSecondLevelSkip
   252 000005DF 59                  <1>     pop rcx ;lhs, rax has rhs of =
   253                              <1> 
   254 000005E0 53                  <1>     push rbx 
   255 000005E1 31DB                <1>     xor ebx, ebx
   256 000005E3 4839C1              <1>     cmp rcx, rax
   257 000005E6 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1
   257 000005EF FF                  <1>
   258 000005F0 480F45C3            <1>     cmovne rax, rbx ;Only set rax to 0 if not equal
   259 000005F4 5B                  <1>     pop rbx
   260 000005F5 E91CFFFFFF          <1>     jmp .parseRelationals
   261                              <1> 
   262                              <1> .processNeq:
   263                              <1> ;Symbol has two chars so skip second char
   264 000005FA 48FFC6              <1>     inc rsi
   265 000005FD 50                  <1>     push rax
   266 000005FE E81B000000          <1>     call .handleSecondLevelSkip
   267 00000603 59                  <1>     pop rcx ;lhs, rax has rhs of <>
   268                              <1> 
   269 00000604 53                  <1>     push rbx 
   270 00000605 31DB                <1>     xor ebx, ebx
   271 00000607 4839C1              <1>     cmp rcx, rax
   272 0000060A 48B8FFFFFFFFFFFFFF- <1>     mov rax, -1 ;Assume true, not equal
   272 00000613 FF                  <1>
   273 00000614 480F44C3            <1>     cmove rax, rbx ;Only set rax to 0 if equal
   274 00000618 5B                  <1>     pop rbx
   275 00000619 E9F8FEFFFF          <1>     jmp .parseRelationals
   276                              <1> 
   277                              <1> ;Level 2, Addition and Subtraction
   278                              <1> .handleSecondLevelSkip:
   279 0000061E 48FFC6              <1>     inc rsi
   280                              <1> .handleSecondLevel:
   281 00000621 E828000000          <1>     call .handleFirstLevel
   282                              <1> .parseAdditiveOperators:    
   283 00000626 803E2D              <1>     cmp byte [rsi], "-"
   284 00000629 7415                <1>     je .processMinus
   285 0000062B 803E2B              <1>     cmp byte [rsi], "+"
   286 0000062E 0F8519010000        <1>     jne .exit              ;No operators, expression evaluated, exit
   287 00000634 50                  <1>     push rax
   288 00000635 E811000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   289                              <1> .processAdd:    
   290 0000063A 59                  <1>     pop rcx
   291 0000063B 4801C8              <1>     add rax, rcx           ;Add the two numbers
   292 0000063E EBE6                <1>     jmp short .parseAdditiveOperators  ;Search again for + or -
   293                              <1> .processMinus:
   294 00000640 50                  <1>     push rax
   295 00000641 E805000000          <1>     call .handleFirstLevelSkip   ;Parse first level
   296 00000646 48F7D8              <1>     neg rax              ;Change a - b to a + -b
   297 00000649 EBEF                <1>     jmp short .processAdd
   298                              <1> 
   299                              <1> ;Level 1, Exponent, Division and multiplication
   300                              <1> 
   301                              <1> .handleFirstLevelSkip:
   302 0000064B 48FFC6              <1>     inc rsi              ;Skip the op symbol
   303                              <1> .handleFirstLevel:
   304 0000064E E8A2000000          <1>     call .handleZerothLevel      ;Call third level
   305                              <1> .parseProductOperators:
   306 00000653 803E5E              <1>     cmp byte [rsi], "^"
   307 00000656 747A                <1>     je .exponentFound
   308 00000658 803E2F              <1>     cmp byte [rsi], "/"
   309 0000065B 743F                <1>     je .processDiv
   310 0000065D 803E2A              <1>     cmp byte [rsi], "*"
   311 00000660 742E                <1>     je .processMult
   312 00000662 813E4D4F4420        <1>     cmp dword [rsi], "MOD "
   313 00000668 0F85DF000000        <1>     jne .exit     ;Neither exp, multiplication, division or MOD, return up a level
   314                              <1> 
   315 0000066E 4881C603000000      <1>     add rsi, 3  ;Skip the MOD part
   316 00000675 50                  <1>     push rax
   317 00000676 E877000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   318 0000067B 59                  <1>     pop rcx
   319 0000067C 4885C0              <1>     test rax, rax        ;Dividend is returned in rax
   320 0000067F 7433                <1>     jz .divByZero
   321 00000681 4891                <1>     xchg rax, rcx
   322 00000683 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   323 00000685 48F7F9              <1>     idiv rcx             ;Signed division
   324 00000688 4889D0              <1>     mov rax, rdx         ;Save remainder in rax
   325 0000068B E9C3FFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   326                              <1>     
   327                              <1> .processMult:
   328 00000690 50                  <1>     push rax
   329 00000691 E85C000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   330 00000696 59                  <1>     pop rcx
   331 00000697 48F7E9              <1>     imul rcx             ; Multiplication
   332 0000069A EBB7                <1>     jmp short .parseProductOperators   ;Search again for * or /
   333                              <1> 
   334                              <1> .processDiv:
   335 0000069C 50                  <1>     push rax
   336 0000069D E850000000          <1>     call .handleZerothLevelSkip   ;Call zeroth level
   337 000006A2 59                  <1>     pop rcx
   338 000006A3 4885C0              <1>     test rax, rax        ;Dividend is returned in rax
   339 000006A6 740C                <1>     jz .divByZero
   340 000006A8 4891                <1>     xchg rax, rcx
   341 000006AA 31D2                <1>     xor edx, edx         ;Clear rdx for rdx:rax
   342 000006AC 48F7F9              <1>     idiv rcx             ;Signed division
   343 000006AF E99FFFFFFF          <1>     jmp .parseProductOperators         ;Search again for * or /
   344                              <1> .divByZero:
   345                              <1>     ;If a division by zero occurs, print the message and return
   346                              <1>     ; result as signed 64 bit MAX or MIN + 1 depending on if the 
   347                              <1>     ; number being divided is positive or negative
   348 000006B4 55                  <1>     push rbp
   349 000006B5 488D2D62100000      <1>     lea rbp, divZer
   350 000006BC E81BFBFFFF          <1>     call ttyOutString   ;Print the message
   351 000006C1 B801000000          <1>     mov eax, 1 ;Get 1 in ebp and clear upper bits
   352 000006C6 48D1C8              <1>     ror rax, 1 ;Put the bit in bit 63
   353 000006C9 48F7D0              <1>     not rax    ;Set all other bits and clear sign bit
   354 000006CC 5D                  <1>     pop rbp
   355 000006CD E981FFFFFF          <1>     jmp .parseProductOperators
   356                              <1> 
   357                              <1> .exponentFound:
   358                              <1>     ;rax has the number to exponentiate
   359 000006D2 50                  <1>     push rax
   360 000006D3 E81A000000          <1>     call .handleZerothLevelSkip  ;Parse the inner expression
   361 000006D8 59                  <1>     pop rcx
   362 000006D9 4891                <1>     xchg rcx, rax
   363                              <1>     ;rax has the number to exponentiate, rcx has the number of times to loop imul
   364 000006DB 53                  <1>     push rbx
   365 000006DC 4889C3              <1>     mov rbx, rax    ;Save a copy of rax in rbx
   366 000006DF 48FFC9              <1>     dec rcx
   367                              <1> .imulLoop:
   368 000006E2 31D2                <1>     xor edx, edx
   369 000006E4 48F7EB              <1>     imul rbx
   370 000006E7 48FFC9              <1>     dec rcx
   371 000006EA 75F6                <1>     jnz .imulLoop
   372 000006EC 5B                  <1>     pop rbx
   373 000006ED E961FFFFFF          <1>     jmp .parseProductOperators
   374                              <1> 
   375                              <1> 
   376                              <1> ;Level 0, Brackets, numbers and vars.
   377                              <1> 
   378                              <1> .handleZerothLevelSkip:
   379 000006F2 48FFC6              <1>     inc rsi             ;Skip the op symbol
   380                              <1> .handleZerothLevel:
   381 000006F5 E8A0FCFFFF          <1>     call spaceSkip
   382 000006FA AC                  <1>     lodsb               ;Read char and adv rsi
   383 000006FB 3C28                <1>     cmp al, '('
   384 000006FD 750F                <1>     jne .varConstCheck
   385 000006FF E8E9FCFFFF          <1>     call handleAlgebraicExpression  ;Parse the inner expression
   386 00000704 803E29              <1>     cmp byte [rsi], ')'   
   387 00000707 745C                <1>     je .closeBracket     ;If close bracket, goto skip spaces
   388 00000709 E95F000000          <1>     jmp .error     ;Otherwise, error
   389                              <1>   
   390                              <1> .varConstCheck:
   391 0000070E 3C41                <1>     cmp al, "A"       ;Alphabetical first char?
   392 00000710 730D                <1>     jae .varOrRNDFound      ;Yes, variable found or rnd function or error
   393 00000712 48FFCE              <1>     dec rsi            ;Else back one symbol 
   394 00000715 E8870B0000          <1>     call decimalToHex  ;to read number into rax
   395 0000071A E97BFCFFFF          <1>     jmp spaceSkip
   396                              <1> 
   397                              <1> .varOrRNDFound:
   398 0000071F 48FFCE              <1>     dec rsi
   399                              <1> ;Evaluate UNARY operators here in reverse stack order of importance
   400 00000722 813E4E4F5420        <1>     cmp dword [rsi], "NOT "
   401 00000728 0F848DFDFFFF        <1>     je .not
   402 0000072E 48FFC6              <1>     inc rsi
   403 00000731 3C5A                <1>     cmp al, "Z"  
   404 00000733 7738                <1>     ja .error   ;Syntax error if char not between A-Z  
   405 00000735 3C52                <1>     cmp al, "R"
   406 00000737 7515                <1>     jne .varFound
   407 00000739 803E4E              <1>     cmp byte [rsi], "N" ;rsi was advanced by 1, check 
   408 0000073C 7510                <1>     jne .varFound
   409 0000073E 807E0144            <1>     cmp byte [rsi+1], "D"
   410 00000742 750A                <1>     jne .varFound
   411 00000744 66AD                <1>     lodsw               ;Advance rsi by 3
   412 00000746 AC                  <1>     lodsb
   413 00000747 E440                <1>     in al, 40h         ;Read timer counter 0
   414 00000749 480FB6C0            <1>     movzx rax, al
   415                              <1> .exit:
   416 0000074D C3                  <1>     ret                ;Return
   417                              <1> 
   418                              <1> .varFound:    
   419 0000074E 48FFCE              <1>     dec rsi ;Back a char
   420 00000751 51                  <1>     push rcx
   421 00000752 E84EFCFFFF          <1>     call getVarNameLength
   422 00000757 E829000000          <1>     call getNumericVariable ;Get variable value in rax
   423 0000075C 4801CE              <1>     add rsi, rcx    ;Go past the edge of the name
   424 0000075F 59                  <1>     pop rcx
   425 00000760 E935FCFFFF          <1>     jmp spaceSkip
   426                              <1> 
   427                              <1> .closeBracket:
   428 00000765 48FFC6              <1>     inc rsi
   429 00000768 E92DFCFFFF          <1>     jmp spaceSkip
   430                              <1> .error:
   431 0000076D 488D2DDD0E0000      <1>     lea rbp, syntax
   432 00000774 E97BF9FFFF          <1>     jmp criticalError
   433                              <1> .stack:
   434 00000779 488D2D120F0000      <1>     lea rbp, stkOvflw
   435 00000780 E96FF9FFFF          <1>     jmp criticalError
   436                              <1> 
   437                              <1> 
   438                              <1> getNumericVariable:
   439                              <1> ;Gets the value stored in a variable into rax 
   440                              <1> ;Input: rsi = Pointer to first char of a variable name
   441                              <1> ;Output: rax = Variable Value
   442                              <1> ;        rsi = Pointer to first char of a variable name
   443 00000785 56                  <1>     push rsi
   444 00000786 51                  <1>     push rcx
   445 00000787 53                  <1>     push rbx
   446 00000788 E818FCFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   447 0000078D E80D0C0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   448 00000792 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Variable doesnt exist? Pretend it is 0
   449 00000799 740E                <1>     je .noVar
   450 0000079B 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   451 0000079F 750C                <1>     jne .stringFoundError
   452 000007A1 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]
   453                              <1> .exit:
   454 000007A5 5B                  <1>     pop rbx
   455 000007A6 59                  <1>     pop rcx
   456 000007A7 5E                  <1>     pop rsi
   457 000007A8 C3                  <1>     ret
   458                              <1> .noVar:
   459 000007A9 31C0                <1>     xor eax, eax
   460 000007AB EBF8                <1>     jmp short .exit
   461                              <1> .stringFoundError:
   462 000007AD 488D2DAC0E0000      <1>     lea rbp, typeError
   463 000007B4 E93BF9FFFF          <1>     jmp criticalError
   464                              <1> 
   465                              <1> setNumericVariable:
   466                              <1> ;Sets the value stored in a variable
   467                              <1> ;Input: rsi = Pointer to first char of a variable name
   468                              <1> ;       rax = Variable value
   469                              <1> ;Output: rsi = Pointer to first char of variable name
   470 000007B9 56                  <1>     push rsi
   471 000007BA 51                  <1>     push rcx
   472 000007BB 53                  <1>     push rbx
   473                              <1> 
   474 000007BC E8E4FBFFFF          <1>     call getVarNameLength   ;Returns the length of the var name in cx
   475 000007C1 E8D90B0000          <1>     call findVariable       ;Returns a pointer to the variable block in rbx
   476 000007C6 4881FBFFFFFFFF      <1>     cmp rbx, -1             ;Variable doesnt exit?
   477 000007CD 740E                <1>     je .makeEditInteger      ;Make one!
   478 000007CF 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
   479 000007D3 750F                <1>     jne .stringFoundError
   480 000007D5 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   481                              <1> .exit:
   482 000007D9 5B                  <1>     pop rbx
   483 000007DA 59                  <1>     pop rcx
   484 000007DB 5E                  <1>     pop rsi
   485 000007DC C3                  <1>     ret
   486                              <1> .makeEditInteger:
   487 000007DD E8CD0C0000          <1>     call makeEditInteger
   488 000007E2 EBF5                <1>     jmp short .exit
   489                              <1> .stringFoundError:
   490 000007E4 488D2D750E0000      <1>     lea rbp, typeError
   491 000007EB E904F9FFFF          <1>     jmp criticalError
   492                              <1> 
   493                              <1> setStringVariable:
   494                              <1> ;Sets the string pointed to by rdx
   495                              <1> ;Input: rsi = Pointer to first char of a variable name
   496                              <1> ;       rdx = Start of string
   497                              <1> ;Output: rsi = Pointer to first char of variable name
   498                              <1> ;Keeps adding characters until a 0, : or " encountered
   499                              <1> ;Adds a 0 to the end
   500 000007F0 51                  <1>     push rcx
   501 000007F1 E8AFFBFFFF          <1>     call getVarNameLength   ;Gets the length of the var name in cx
   502 000007F6 E8FF0C0000          <1>     call makeEditString     ;Returns a ptr to the var block in rbx
   503 000007FB 59                  <1>     pop rcx
   504 000007FC C3                  <1>     ret
   505                              <1> 
   506                              <1> findOtherExpressionsOnLine:
   507                              <1> ;Input: rsi = start of line portion
   508                              <1> ;Output: rsi = points to first char after first ":" found
   509                              <1> ;         al = : if it was found or 00 if not
   510 000007FD AC                  <1>     lodsb
   511 000007FE 3C00                <1>     cmp al, 0   ;Null hit, RIP procedure
   512 00000800 7404                <1>     je .exit
   513 00000802 3C3A                <1>     cmp al, ":" ;Strings can be terminated with a :
   514 00000804 75F7                <1>     jne findOtherExpressionsOnLine
   515                              <1> .exit:
   516 00000806 C3                  <1>     ret
    10                                  %include "./src/COMMANDS.ASM"
     1                              <1> 
     2                              <1> funTbl:
     3                              <1> ;Use PASCAL strings to know how long the comparisons need to be
     4                              <1> ;All function pointers are saved as distances from the head
     5                              <1> ; of the function table
     6                              <1> ;BASIC instructions are space terminated
     7                              <1> ;Interpreter instructions are null terminated
     8 00000807 044C4554            <1>     db 4, "LET"     ;DONE
     9 0000080B 7701                <1>     dw oldSchoolAssignemnt - funTbl
    10                              <1> 
    11 0000080D 054E455700          <1>     db 5, "NEW",0     ;DONE
    12 00000812 FA01                <1>     dw newProgram - funTbl 
    13                              <1> 
    14 00000814 07434C45415200      <1>     db 7, "CLEAR",0   ;DONE
    15 0000081B FA01                <1>     dw newProgram - funTbl 
    16                              <1> 
    17 0000081D 064C49535400        <1>     db 6, "LIST",0    ;DONE
    18 00000823 5E02                <1>     dw listProgram - funTbl 
    19                              <1> 
    20 00000825 0552554E00          <1>     db 5, "RUN",0     ;DONE
    21 0000082A 9A02                <1>     dw runProgram - funTbl
    22                              <1> 
    23 0000082C 085052494E542420    <1>     db 8, "PRINT$ "    ;Not implemented yet
    24 00000834 CB02                <1>     dw printStatement - funTbl
    25                              <1> 
    26 00000836 075052494E5420      <1>     db 7, "PRINT "    ;DONE
    27 0000083D CB02                <1>     dw printStatement - funTbl
    28                              <1> 
    29 0000083F 033F20              <1>     db 3, "? "        ;DONE, alias Print
    30 00000842 CB02                <1>     dw printStatement - funTbl
    31                              <1> 
    32 00000844 07494E50555420      <1>     db 7, "INPUT "
    33 0000084B 6A03                <1>     dw getInput - funTbl
    34                              <1> 
    35 0000084D 04494620            <1>     db 4, "IF "      ;DONE, needs to be tested
    36 00000851 020A                <1>     dw handleIf - funTbl
    37                              <1> 
    38 00000853 06474F544F20        <1>     db 6, "GOTO "    ;DONE
    39 00000859 AF06                <1>     dw goto - funTbl
    40                              <1> 
    41 0000085B 07474F53554220      <1>     db 7, "GOSUB "
    42 00000862 C406                <1>     dw gosub - funTbl
    43                              <1> 
    44 00000864 0852455455524E20    <1>     db 8, "RETURN "
    45 0000086C 0D07                <1>     dw return - funTbl
    46                              <1> 
    47 0000086E 0852455455524E00    <1>     db 8, "RETURN",0
    48 00000876 0D07                <1>     dw return - funTbl
    49                              <1> 
    50 00000878 05464F5220          <1>     db 5, "FOR "
    51 0000087D 5B07                <1>     dw forLoop - funTbl
    52                              <1> 
    53 0000087F 064E45585400        <1>     db 6, "NEXT",0
    54 00000885 6708                <1>     dw next - funTbl
    55                              <1> 
    56 00000887 064E45585420        <1>     db 6, "NEXT "
    57 0000088D 6708                <1>     dw next - funTbl
    58                              <1> 
    59 0000088F 07                  <1>     db 7
    60                              <1> whileStr:
    61 00000890 5748494C4520        <1>     db "WHILE "
    62 00000896 DB08                <1>     dw while - funTbl
    63                              <1> 
    64 00000898 0657454E4420        <1>     db 6, "WEND "
    65 0000089E 5209                <1>     dw wend - funTbl    
    66 000008A0 0657454E4400        <1>     db 6, "WEND",0
    67 000008A6 5209                <1>     dw wend - funTbl   
    68                              <1> thenStr:
    69 000008A8 065448454E20        <1>     db 6, "THEN "    ;DONE
    70 000008AE 4401                <1>     dw badCmd - funTbl
    71                              <1> elseStr:
    72 000008B0 06454C534520        <1>     db 6, "ELSE "    ;DONE
    73 000008B6 4401                <1>     dw badCmd - funTbl
    74                              <1> 
    75 000008B8 0853595354454D00    <1>     db 8, "SYSTEM",0  ;DONE
    76 000008C0 0904                <1>     dw returnToDOS - funTbl
    77                              <1> 
    78 000008C2 05434C5300          <1>     db 5, "CLS",0     ;DONE
    79 000008C7 0B04                <1>     dw cls - funTbl
    80 000008C9 05434C5320          <1>     db 5, "CLS "      ;DONE
    81 000008CE 0B04                <1>     dw cls - funTbl
    82                              <1> 
    83 000008D0 07444542554700      <1>     db 7, "DEBUG",0   ;DONE
    84 000008D7 1004                <1>     dw dbgr - funTbl
    85                              <1> 
    86 000008D9 0654524F4E00        <1>     db 6, "TRON",0    ;DONE
    87 000008DF 5501                <1>     dw tron - funTbl
    88                              <1> 
    89 000008E1 0754524F464600      <1>     db 7, "TROFF",0   ;DONE
    90 000008E8 5D01                <1>     dw troff - funTbl
    91                              <1> 
    92 000008EA 05454E4420          <1>     db 5, "END "     ;DONE
    93 000008EF 5001                <1>     dw endProg - funTbl
    94 000008F1 05454E4400          <1>     db 5, "END",0     ;DONE
    95 000008F6 5001                <1>     dw endProg - funTbl
    96                              <1> 
    97 000008F8 0653544F5020        <1>     db 6, "STOP "    ;DONE
    98 000008FE 5001                <1>     dw endProg - funTbl
    99 00000900 0653544F5000        <1>     db 6, "STOP",0    ;DONE
   100 00000906 5001                <1>     dw endProg - funTbl
   101                              <1> 
   102 00000908 0845534341504520    <1>     db 8, "ESCAPE "  ;DONE
   103 00000910 5001                <1>     dw endProg - funTbl
   104 00000912 0845534341504500    <1>     db 8, "ESCAPE",0  ;DONE
   105 0000091A 5001                <1>     dw endProg - funTbl
   106                              <1> 
   107 0000091C 07455045454B20      <1>     db 7, "EPEEK "
   108 00000923 6D01                <1>     dw memRead - funTbl
   109                              <1> 
   110 00000925 0745504F4B4520      <1>     db 7, "EPOKE "
   111 0000092C 6D01                <1>     dw memWrite - funTbl
   112                              <1> 
   113 0000092E 065045454B20        <1>     db 6, "PEEK "
   114 00000934 6D01                <1>     dw byteRead - funTbl
   115                              <1> 
   116 00000936 06504F4B4520        <1>     db 6, "POKE "
   117 0000093C 6D01                <1>     dw byteWrite - funTbl
   118                              <1> 
   119 0000093E 0552454D20          <1>     db 5, "REM "
   120 00000943 6E01                <1>     dw remark - funTbl
   121 00000945 032720              <1>     db 3, "' "
   122 00000948 6E01                <1>     dw remark - funTbl
   123                              <1> 
   124 0000094A FF                  <1>     db -1    ;Demarkate the end of the table
   125                              <1> ;End of Table
   126                              <1> badCmd:
   127 0000094B 488D2DFF0C0000      <1>     lea rbp, syntax
   128 00000952 E89DF7FFFF          <1>     call criticalError 
   129                              <1> endProg:
   130 00000957 E96A010000          <1>     jmp runProgram.endProgramPoint
   131                              <1> tron:
   132 0000095C 800D(D90E0000)02    <1>     or byte [stateByte], traceBit   ;Set the traceBit
   133 00000963 C3                  <1>     ret
   134                              <1> troff:
   135 00000964 8025(D90E0000)FD    <1>     and byte [stateByte], ~traceBit ;Clear the traceBit
   136 0000096B C3                  <1>     ret
   137                              <1> notWrapper:
   138 0000096C 6687DB              <1>     xchg bx, bx
   139 0000096F E947FBFFFF          <1>     jmp handleAlgebraicExpression.not
   140                              <1> memRead:
   141                              <1> memWrite:
   142                              <1> byteRead:
   143                              <1> byteWrite:
   144 00000974 C3                  <1>     ret
   145                              <1> remark:
   146                              <1> ;Comment code, keep looping until end of line
   147 00000975 AC                  <1>     lodsb
   148 00000976 84C0                <1>     test al, al 
   149 00000978 75FB                <1>     jnz remark
   150 0000097A 48FFCE              <1>     dec rsi ;When al = 0, rsi points past it, move it back by one
   151 0000097D C3                  <1>     ret
   152                              <1> 
   153                              <1> oldSchoolAssignemnt:
   154                              <1> ;Assign with a LET directive
   155                              <1> ;rsi points to first char AFTER function name
   156 0000097E E817FAFFFF          <1>     call spaceSkip  ;Goto var assignment as if at start of line
   157                              <1> variableAssignment: ;Assignment without a LET directive
   158                              <1>     ;Establish if the string is a variable assignment or not
   159                              <1>     ;rsi points to start of string
   160 00000983 E81DFAFFFF          <1>     call getVarNameLength   ;Get the variable name length
   161 00000988 4889F7              <1>     mov rdi, rsi    ;Save ptr to start of string in rdi
   162 0000098B 4801CE              <1>     add rsi, rcx    ;Go to end of string
   163 0000098E E807FAFFFF          <1>     call spaceSkip  ;Skip spaces after the end of the var name
   164 00000993 AC                  <1>     lodsb   ;Get the first char after the spaces. This must be a =
   165 00000994 3C3D                <1>     cmp al, "="
   166 00000996 7551                <1>     jne .syntaxError
   167 00000998 4889FE              <1>     mov rsi, rdi    ;Return rsi to the start of the string name
   168 0000099B 4801CE              <1>     add rsi, rcx    ;Go to end of var name
   169 0000099E 48FFCE              <1>     dec rsi
   170 000009A1 AC                  <1>     lodsb   ;Get last char into al and inc rsi
   171 000009A2 3C24                <1>     cmp al, "$"
   172 000009A4 7420                <1>     je .stringAssignment
   173 000009A6 E8EFF9FFFF          <1>     call spaceSkip  ;Skip any spaces
   174 000009AB 48FFC6              <1>     inc rsi         ;Go past the equality sign
   175 000009AE E8E7F9FFFF          <1>     call spaceSkip  ;Skip any spaces
   176 000009B3 803E22              <1>     cmp byte [rsi], 22h ;Open speech mark
   177 000009B6 743D                <1>     je .typError    ;Integers cant have speechmarks
   178 000009B8 E830FAFFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   179 000009BD 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   180 000009C0 E8F4FDFFFF          <1>     call setNumericVariable
   181 000009C5 C3                  <1>     ret
   182                              <1> .stringAssignment:
   183                              <1> ;This simply copies the string which is either speech mark, 0 or : terminated
   184                              <1> ;First allocate a string
   185                              <1> ;rsi = First char after the end of the variable name
   186                              <1> ;rdi = start of variable name 
   187                              <1> ;rcx = char count for var name
   188 000009C6 E8CFF9FFFF          <1>     call spaceSkip  ;Skip any spaces
   189 000009CB 48FFC6              <1>     inc rsi         ;Go past the equality sign
   190 000009CE E8C7F9FFFF          <1>     call spaceSkip  ;Skip any spaces
   191 000009D3 803E22              <1>     cmp byte [rsi], 22h ;Open speechmark check again
   192 000009D6 751D                <1>     jne .typError    ;Assigning a number to a string is a type error
   193                              <1>     ;rsi now points to the start of the string to save
   194 000009D8 48FFC6              <1>     inc rsi ;Go past the speech mark
   195 000009DB 4889F2              <1>     mov rdx, rsi    ;save start of string data in rdx
   196 000009DE 4889FE              <1>     mov rsi, rdi
   197 000009E1 57                  <1>     push rdi
   198 000009E2 E809FEFFFF          <1>     call setStringVariable
   199 000009E7 5E                  <1>     pop rsi ;Save the start of the assignment in rsi
   200 000009E8 C3                  <1>     ret
   201                              <1> 
   202                              <1> .syntaxError:
   203 000009E9 488D2D610C0000      <1>     lea rbp, syntax ;Syntax error, keyword a bit confused
   204 000009F0 E9FFF6FFFF          <1>     jmp criticalError
   205                              <1> .typError:
   206 000009F5 488D2D640C0000      <1>     lea rbp, typeError
   207 000009FC E9F3F6FFFF          <1>     jmp criticalError
   208                              <1> 
   209                              <1> 
   210                              <1> newProgram: 
   211                              <1> ;Simply reset the program pointers
   212 00000A01 488D05(00000000)    <1>     lea rax, section.programArea.vstart
   213 00000A08 488905(C80E0000)    <1>     mov qword [minMemAddr], rax
   214 00000A0F 488905(E20E0000)    <1>     mov qword [lastBlock], rax  ;Start writing at this location
   215 00000A16 488905(DA0E0000)    <1>     mov qword [mcbChain], rax   ;Create a mock MCB here
   216                              <1> 
   217 00000A1D 4889C2              <1>     mov rdx, rax
   218 00000A20 668B4801            <1>     mov cx, word [rax + memBlock.wBlockSize]
   219 00000A24 4889C7              <1>     mov rdi, rax
   220 00000A27 30C0                <1>     xor al, al
   221 00000A29 F3AA                <1>     rep stosb   ;Sanitise the old first allocation
   222                              <1> 
   223 00000A2B C60272              <1>     mov byte [rdx + memBlock.bSignature], lastMemBlock
   224 00000A2E 66C742010000        <1>     mov word [rdx + memBlock.wBlockSize], 0 ;Dummy block, no size, gets overwritten
   225 00000A34 31C0                <1>     xor eax, eax
   226 00000A36 8805(D80E0000)      <1>     mov byte [strLen], al
   227 00000A3C 488D3D(980D0000)    <1>     lea rdi, inString
   228 00000A43 B900010000          <1>     mov ecx, maxLineLen
   229 00000A48 F3AA                <1>     rep stosb
   230 00000A4A C605(F40E0000)0A    <1>     mov byte [currentLine], 10  ;Default to line 10
   231 00000A51 31C0                <1>     xor eax, eax,
   232 00000A53 48FFC8              <1>     dec rax ;rax = -1
   233 00000A56 488905(EA0E0000)    <1>     mov qword [firstLinPtr], rax ;No program in memory
   234 00000A5D 668905(F20E0000)    <1>     mov word [firstLinNum], ax
   235 00000A64 C3                  <1>     ret
   236                              <1> listProgram:
   237                              <1> ;Go line by line and echo the program lines, inserting a crlf after each
   238                              <1> ;First print the line number, then add a space
   239 00000A65 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]    ;Get a pointer to the first program line
   240                              <1> .printLines:
   241 00000A6C 488D2D930B0000      <1>     lea rbp, crlf           ;New line
   242 00000A73 E864F7FFFF          <1>     call ttyOutString
   243 00000A78 4881FBFFFFFFFF      <1>     cmp rbx, -1
   244 00000A7F 741F                <1>     je .exit
   245 00000A81 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]
   246 00000A85 E83F080000          <1>     call printdecimalword
   247 00000A8A B020                <1>     mov al, " "
   248 00000A8C E83FF7FFFF          <1>     call ttyOutChar ;Print a space
   249 00000A91 488D6B0E            <1>     lea rbp, qword [rbx + progLineBlock.sLine]  ;Null terminated string
   250 00000A95 E842F7FFFF          <1>     call ttyOutString
   251 00000A9A 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk list of program lines
   252 00000A9E EBCC                <1>     jmp short .printLines
   253                              <1> .exit:
   254 00000AA0 C3                  <1>     ret
   255                              <1> runProgram:
   256                              <1>     ;Runs the machine in indirect mode
   257 00000AA1 800D(D90E0000)04    <1>     or byte [stateByte], indirectBit    ;Entering indirect mode
   258                              <1>     ;rsi must point to the first line
   259 00000AA8 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
   260 00000AAF 668915(F40E0000)    <1>     mov word [currentLine], dx ;Reset the current line back to the start
   261 00000AB6 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   262 00000ABD 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine]
   263 00000AC1 E8BBF7FFFF          <1>     call runLine
   264                              <1> .endProgramPoint:
   265 00000AC6 8025(D90E0000)FB    <1>     and byte [stateByte], ~indirectBit  ;Exit indirect mode
   266 00000ACD E980F5FFFF          <1>     jmp mainLoop    ;Resets the stack if exit mid loop to avoid stkoverflow
   267                              <1> 
   268                              <1> printStatement:
   269                              <1> ;Strings must be "" delimited or a string variable must be used
   270                              <1> ;rsi points to first char AFTER function name
   271                              <1> .printStart:
   272 00000AD2 E8C3F8FFFF          <1>     call spaceSkip  ;move rsi to the start of the expression
   273 00000AD7 AC                  <1>     lodsb
   274                              <1> 
   275 00000AD8 84C0                <1>     test al, al     ;Is this a null string?
   276 00000ADA 746B                <1>     jz .psvexit
   277 00000ADC 3C22                <1>     cmp al, 022h    ;22h = ASCII Speechmarks
   278 00000ADE 7449                <1>     je .stringPrint
   279                              <1>     ;Here we check if the first char is ASCII, if it is, check if its a string var
   280 00000AE0 3C41                <1>     cmp al, "A"
   281 00000AE2 7204                <1>     jb .printExpr
   282 00000AE4 3C5A                <1>     cmp al, "Z"
   283 00000AE6 7214                <1>     jb .printStringVar
   284                              <1> .printExpr:
   285 00000AE8 48FFCE              <1>     dec rsi ;Return to the start of the string
   286                              <1> .printExpr1:    ;Return without dec rsi
   287 00000AEB E8FDF8FFFF          <1>     call handleAlgebraicExpression ;Gets value of a var and/or algebraic operation
   288 00000AF0 E8D4070000          <1>     call printdecimalword
   289 00000AF5 E8A0F8FFFF          <1>     call spaceSkip
   290 00000AFA EB2D                <1>     jmp short .stringPrint
   291                              <1> .printStringVar:
   292                              <1>     ;Check if it is a string var or a unary function
   293 00000AFC 48FFCE              <1>     dec rsi
   294 00000AFF E8A1F8FFFF          <1>     call getVarNameLength
   295 00000B04 E8C9F8FFFF          <1>     call getVarType
   296 00000B09 81FB01000000        <1>     cmp ebx, strEquate
   297 00000B0F 75DA                <1>     jne .printExpr1  ;rsi points to the same point as initially
   298 00000B11 E889080000          <1>     call findVariable   ;ecx has string length, get block ptr in rbx
   299 00000B16 55                  <1>     push rbp
   300 00000B17 488D6B04            <1>     lea rbp, qword [rbx + stringBlock.string]
   301 00000B1B E8BCF6FFFF          <1>     call ttyOutString
   302 00000B20 5D                  <1>     pop rbp
   303 00000B21 4801CE              <1>     add rsi, rcx    ;Go past variable
   304 00000B24 E871F8FFFF          <1>     call spaceSkip
   305                              <1> .stringPrint:
   306 00000B29 AC                  <1>     lodsb
   307 00000B2A 3C00                <1>     cmp al, 0
   308 00000B2C 7419                <1>     je .psvexit
   309 00000B2E 3C3A                <1>     cmp al, ":"
   310 00000B30 7412                <1>     je .psvexitColon
   311 00000B32 3C22                <1>     cmp al, 022h    ;Close Speech marks, check next char
   312 00000B34 741E                <1>     je .closespeechmarks
   313 00000B36 3C3B                <1>     cmp al, ";"     ;Semicolon means print next section on same line
   314 00000B38 742D                <1>     je .continue
   315 00000B3A E891F6FFFF          <1>     call ttyOutChar
   316 00000B3F EBE8                <1>     jmp short .stringPrint
   317                              <1> .openSpeechMark:
   318 00000B41 48FFC6              <1>     inc rsi ;Go back a char
   319                              <1> .psvexitColon:
   320 00000B44 48FFCE              <1>     dec rsi ;Go back a char
   321                              <1> .psvexit:
   322 00000B47 488D2DB80A0000      <1>     lea rbp, crlf
   323 00000B4E E889F6FFFF          <1>     call ttyOutString
   324 00000B53 C3                  <1>     ret
   325                              <1> .closespeechmarks:
   326 00000B54 E841F8FFFF          <1>     call spaceSkip
   327 00000B59 AC                  <1>     lodsb
   328 00000B5A 3C3B                <1>     cmp al, ";" ;only exception to exiting if next non space char is a semicolon
   329 00000B5C 0F8470FFFFFF        <1>     je .printStart
   330 00000B62 48FFCE              <1>     dec rsi ;Go back a step
   331 00000B65 EBE0                <1>     jmp short .psvexit
   332                              <1> .continue:
   333 00000B67 E82EF8FFFF          <1>     call spaceSkip
   334 00000B6C E961FFFFFF          <1>     jmp .printStart
   335                              <1> getInput:
   336                              <1> ;Take a string as a prompt
   337                              <1> ;rdi points just past the end of the command line
   338                              <1> ;rsi points to first char AFTER function name
   339                              <1> ;Input prompt strings must be speech mark delimited on both sides!
   340 00000B71 E824F8FFFF          <1>     call spaceSkip
   341                              <1>     ;Now check to see if the user has specified a custom prompt
   342 00000B76 AC                  <1>     lodsb   ;Get first symbol and go past it
   343 00000B77 3C22                <1>     cmp al, 22h ;Speechmark?
   344 00000B79 7535                <1>     jne .defaultPrompt ;If no speechmark, print default prompt
   345                              <1> .customPrompt:
   346 00000B7B 4889F7              <1>     mov rdi, rsi    ;Save start of string in rdi
   347                              <1> .cp0:
   348 00000B7E AC                  <1>     lodsb           ;Now search for end of string speech marks or null terminator
   349 00000B7F 3C22                <1>     cmp al, 22h     ;Is al a speech mark?
   350 00000B81 7410                <1>     je .printCustomPrompt
   351 00000B83 84C0                <1>     test al, al     ;Is al null?
   352 00000B85 75F7                <1>     jnz .cp0        ;No, keep searching for terminator
   353                              <1> .error:
   354 00000B87 488D2DC30A0000      <1>     lea rbp, syntax
   355 00000B8E E961F5FFFF          <1>     jmp criticalError
   356                              <1> .printCustomPrompt:
   357 00000B93 4889FE              <1>     mov rsi, rdi    ;rsi points to the first char of the string
   358                              <1> .pcp0:
   359 00000B96 AC                  <1>     lodsb
   360 00000B97 3C22                <1>     cmp al, 22h     ;Speechmark?
   361 00000B99 7407                <1>     je .stopPrompt
   362 00000B9B E830F6FFFF          <1>     call ttyOutChar
   363 00000BA0 EBF4                <1>     jmp short .pcp0
   364                              <1> .stopPrompt:
   365 00000BA2 E8F3F7FFFF          <1>     call spaceSkip  ;Skip spaces
   366 00000BA7 AC                  <1>     lodsb   ;Get first non space char after closing speechmark
   367 00000BA8 3C3B                <1>     cmp al, ";" ;Semicolon means no default prompt
   368 00000BAA 740E                <1>     je .noDefaultPrompt
   369 00000BAC 3C2C                <1>     cmp al, "," ;Comma also means no default prompt
   370 00000BAE 740A                <1>     je .noDefaultPrompt
   371                              <1> .defaultPrompt:
   372 00000BB0 48FFCE              <1>     dec rsi
   373 00000BB3 B03F                <1>     mov al, "?"
   374 00000BB5 E816F6FFFF          <1>     call ttyOutChar
   375                              <1> .noDefaultPrompt:
   376 00000BBA B020                <1>     mov al, " " ;space
   377 00000BBC E80FF6FFFF          <1>     call ttyOutChar
   378 00000BC1 E8D4F7FFFF          <1>     call spaceSkip  ;Skip spaces after default supressor to get to var name
   379 00000BC6 E8DAF7FFFF          <1>     call getVarNameLength   ;Get var name length in ecx
   380 00000BCB 488D3D(980E0000)    <1>     lea rdi, digitString    ;Buffer has 48 chars, string names are max 40
   381 00000BD2 E890090000          <1>     call strcpy     ;rsi points to var name
   382 00000BD7 57                  <1>     push rdi    ;rdi points to first char of variable
   383 00000BD8 51                  <1>     push rcx
   384 00000BD9 E835F5FFFF          <1>     call getLineInput   ;Get input from the user in inString, null terminated
   385                              <1>     ;This will sanitise in direct mode meaning input cannot have any more statements
   386                              <1>     ; after it.
   387 00000BDE 59                  <1>     pop rcx
   388 00000BDF 5F                  <1>     pop rdi 
   389 00000BE0 4889FE              <1>     mov rsi, rdi    ;Save the start of the var name in rsi
   390 00000BE3 4801CE              <1>     add rsi, rcx    ;Go to end of var
   391 00000BE6 48FFCE              <1>     dec rsi
   392 00000BE9 AC                  <1>     lodsb   ;Are we a string variable?
   393 00000BEA 488D35(980D0000)    <1>     lea rsi, inString   ;Move rsi to start of user input
   394 00000BF1 3C24                <1>     cmp al, "$"
   395 00000BF3 740F                <1>     je .handleString
   396                              <1> .handleNumeric:
   397 00000BF5 E8F3F7FFFF          <1>     call handleAlgebraicExpression  ;Get the result of the expression into rax
   398 00000BFA 4889FE              <1>     mov rsi, rdi    ;Return the start of the string into rsi
   399 00000BFD E8B7FBFFFF          <1>     call setNumericVariable
   400 00000C02 EB0B                <1>     jmp short .commonExit
   401                              <1> .handleString:
   402                              <1>     ;IF a string variable, come here
   403                              <1>     ;rdi has the start of the variable name
   404                              <1> 
   405                              <1>     ;rdx must point to the start of the string
   406                              <1>     ;rsi must point to the start of the variable name
   407 00000C04 4889F2              <1>     mov rdx, rsi
   408 00000C07 4889FE              <1>     mov rsi, rdi    ;Return start of user name in rsi
   409 00000C0A E8E1FBFFFF          <1>     call setStringVariable
   410                              <1> .commonExit:
   411 00000C0F C3                  <1>     ret
   412                              <1> 
   413                              <1> ;==========================================================:
   414                              <1> ;==========================================================:
   415                              <1> ;==========================================================:
   416                              <1> ;          Functions Related to Program Management         :
   417                              <1> ;==========================================================:
   418                              <1> ;==========================================================:
   419                              <1> ;==========================================================:
   420                              <1> returnToDOS:
   421 00000C10 CD20                <1>     int 20h
   422                              <1> cls:
   423 00000C12 E9EFF5FFFF          <1>     jmp ttyClear
   424                              <1> dbgr:
   425                              <1> ;Hook int 40h to main prog EP to allow returning 
   426                              <1> ;First call to get default BIOS segement selector and attribute word
   427 00000C17 B040                <1>     mov al, 40h          ;Interrupt number
   428 00000C19 8D1507000000        <1>     lea edx, .farReturn
   429 00000C1F E8EAF4FFFF          <1>     call setHandler
   430                              <1> 
   431 00000C24 CD38                <1>     int 38h ;Call debugger
   432                              <1> .farReturn:
   433                              <1>     ;Reconnect CTRL+BREAK handler
   434 00000C26 48BC-               <1>     mov rsp, stacktop   ;Immediately reset stack
   434 00000C28 [900D000000000000]  <1>
   435                              <1>     
   436 00000C30 488D15CEF4FFFF      <1>     lea rdx, ctrlBreakHandler
   437 00000C37 B023                <1>     mov al, 23h         ;CTRL+C handler
   438 00000C39 E8D0F4FFFF          <1>     call setHandler
   439                              <1>     
   440 00000C3E 488D2DC1090000      <1>     lea rbp, crlf
   441 00000C45 E892F5FFFF          <1>     call ttyOutString
   442 00000C4A E903F4FFFF          <1>     jmp mainLoop
    11                                  %include "./src/CTRLFLOW.ASM"
     1                              <1> 
     2                              <1> ;Handles all the specific functions related to control flow such as scanning 
     3                              <1> ; lines for WEND, RETURN, NEXT
     4                              <1> retScan:
     5                              <1> ;Gets the current line address and starts searching program from current prog line
     6                              <1> ; for a return
     7 00000C4F 56                  <1>     push rsi
     8 00000C50 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
     9 00000C57 E8B3070000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    10 00000C5C 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    11 00000C63 0F8493000000        <1>     je .error   ;Unknown Error
    12                              <1> ;Now pack for the first portion/line after the GOSUB
    13                              <1> ;rsi points just after the GOSUB itself
    14 00000C69 56                  <1>     push rsi    ;Save the first point after the WHILE itself
    15 00000C6A E88EFBFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
    16 00000C6F 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
    17 00000C73 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
    18 00000C77 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
    19 00000C7A 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
    20 00000C7C 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
    21 00000C82 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
    22 00000C85 09C8                <1>     or eax, ecx     ;Add byte three to eax
    23 00000C87 89C2                <1>     mov edx, eax    ;Save in edx
    24 00000C89 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
    25 00000C8D 5E                  <1>     pop rsi
    26                              <1> .initialSearch:
    27                              <1>     ;First look for a ASCII NUL or RETURN
    28 00000C8E 803E00              <1>     cmp byte [rsi], 0
    29 00000C91 7415                <1>     je .gotoNextLine
    30 00000C93 813E52455455        <1>     cmp dword [rsi], "RETU"
    31 00000C99 7508                <1>     jne .notCandidate
    32 00000C9B 66817E04524E        <1>     cmp word [rsi + 4], "RN"
    33 00000CA1 7418                <1>     je .wordFound
    34                              <1> .notCandidate:
    35 00000CA3 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a RETURN
    36 00000CA6 EBE6                <1>     jmp short .initialSearch
    37                              <1> .gotoNextLine:
    38 00000CA8 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
    39 00000CAC 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
    40 00000CB3 7431                <1>     je .noRet
    41 00000CB5 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
    42 00000CB9 EBD3                <1>     jmp short .initialSearch
    43                              <1> .wordFound:
    44                              <1>     ;Here, RETURN found! Huzzah! Now pack edx correctly
    45                              <1>     ;Add 055AA55h in bytes 4:2
    46 00000CBB 48B8000055AA550000- <1>     mov rax, 055AA550000h
    46 00000CC4 00                  <1>
    47 00000CC5 4809C2              <1>     or rdx, rax
    48                              <1>     ;Compute checksum now
    49 00000CC8 31C0                <1>     xor eax, eax
    50 00000CCA B0A5                <1>     mov al, GOSUBsig 
    51 00000CCC 6689C2              <1>     mov dx, ax  ;Zero checksum byte
    52 00000CCF 31C0                <1>     xor eax, eax
    53 00000CD1 B908000000          <1>     mov ecx, 8  ;8 times
    54                              <1> .csumLoop:
    55                              <1>     ;Spin rdx 8 times adding each byte to al
    56 00000CD6 00D0                <1>     add al, dl
    57 00000CD8 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
    58 00000CDC FFC9                <1>     dec ecx
    59 00000CDE 75F6                <1>     jnz .csumLoop
    60 00000CE0 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
    61 00000CE2 88C6                <1>     mov dh, al  ;Save in checksum byte
    62                              <1> .exit:
    63 00000CE4 5E                  <1>     pop rsi
    64 00000CE5 C3                  <1>     ret
    65                              <1> .noRet:
    66 00000CE6 488D2D060A0000      <1>     lea rbp, noReturn
    67 00000CED 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    67 00000CF6 FF                  <1>
    68 00000CF7 E9E8FFFFFF          <1>     jmp .exit
    69                              <1> .error:
    70 00000CFC 488D2D070A0000      <1>     lea rbp, uknowner
    71 00000D03 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
    71 00000D0C FF                  <1>
    72 00000D0D E9D2FFFFFF          <1>     jmp .exit
    73                              <1> 
    74                              <1> wendScan:
    75                              <1> ; Gets the current line address and starts searching program from the current line
    76                              <1> ; for a WEND
    77                              <1> ; Puts the packed specialQword into rdx if a WEND is found
    78                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
    79 00000D12 56                  <1>     push rsi
    80 00000D13 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
    81 00000D1A E8F0060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
    82 00000D1F 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
    83 00000D26 0F84A2000000        <1>     je .error   ;Unknown Error
    84                              <1> ;Now pack for the first portion/line after the for loop
    85                              <1> ;rsi points just after the FOR itself
    86 00000D2C 56                  <1>     push rsi    ;Save the first point after the WHILE itself
    87 00000D2D E8CBFAFFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
    88 00000D32 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
    89 00000D36 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
    90 00000D3A 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
    91 00000D3D 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
    92 00000D3F 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
    93 00000D45 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
    94 00000D48 09C8                <1>     or eax, ecx     ;Add byte three to eax
    95 00000D4A 89C2                <1>     mov edx, eax    ;Save in edx
    96 00000D4C 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
    97 00000D50 5E                  <1>     pop rsi
    98                              <1> .initialSearch:
    99                              <1>     ;First look for a : or a ASCII NUL to leave the WHILE part of the line
   100 00000D51 803E00              <1>     cmp byte [rsi], 0
   101 00000D54 740D                <1>     je .gotoNextLine
   102 00000D56 813E57454E44        <1>     cmp dword [rsi], "WEND"
   103 00000D5C 7418                <1>     je .wordFound
   104 00000D5E 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a WEND
   105                              <1>     ;"WEND" found here!
   106 00000D61 EBEE                <1>     jmp short .initialSearch
   107                              <1> .gotoNextLine:
   108 00000D63 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   109 00000D67 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   110 00000D6E 7448                <1>     je .noWend
   111 00000D70 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   112 00000D74 EBDB                <1>     jmp short .initialSearch
   113                              <1> .wordFound:
   114                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   115                              <1>     ;rsi points to the N in "WEND "
   116 00000D76 E882FAFFFF          <1>     call findOtherExpressionsOnLine 
   117                              <1>     ;make rsi point to next expression on the line or the end of the line
   118 00000D7B 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   119 00000D7F 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   120 00000D83 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   121 00000D86 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   122 00000D88 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   123 00000D8E C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   124 00000D91 09C8                <1>     or eax, ecx     ;Add byte three to eax
   125 00000D93 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   126 00000D97 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   127                              <1>     ;Compute checksum now
   128 00000D9A 31C0                <1>     xor eax, eax
   129 00000D9C B055                <1>     mov al, WHILEsig 
   130 00000D9E 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   131 00000DA1 31C0                <1>     xor eax, eax
   132 00000DA3 B908000000          <1>     mov ecx, 8  ;8 times
   133                              <1> .csumLoop:
   134                              <1>     ;Spin rdx 8 times adding each byte to al
   135 00000DA8 00D0                <1>     add al, dl
   136 00000DAA 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   137 00000DAE FFC9                <1>     dec ecx
   138 00000DB0 75F6                <1>     jnz .csumLoop
   139 00000DB2 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   140 00000DB4 88C6                <1>     mov dh, al  ;Save in checksum byte
   141                              <1> .exit:
   142 00000DB6 5E                  <1>     pop rsi
   143 00000DB7 C3                  <1>     ret
   144                              <1> .noWend:
   145 00000DB8 488D2DE4080000      <1>     lea rbp, noWend
   146 00000DBF 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   146 00000DC8 FF                  <1>
   147 00000DC9 E9E8FFFFFF          <1>     jmp .exit
   148                              <1> .error:
   149 00000DCE 488D2D35090000      <1>     lea rbp, uknowner
   150 00000DD5 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   150 00000DDE FF                  <1>
   151 00000DDF E9D2FFFFFF          <1>     jmp .exit
   152                              <1> nextScan:
   153                              <1> ; Gets the current line address and starts searching program from the current line
   154                              <1> ; for a NEXT
   155                              <1> ; Puts the packed specialQword into rdx if a NEXT is found
   156                              <1> ; Returns rdx = -1 if an error occured with rbp pointing to the error string
   157 00000DE4 56                  <1>     push rsi
   158 00000DE5 668B15(F40E0000)    <1>     mov dx, word [currentLine]  ;pre-load dx with the current line number
   159 00000DEC E81E060000          <1>     call searchForProgramLine   ;Get program block pointer into rbx
   160 00000DF1 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;If for some reason line doesnt exist?
   161 00000DF8 0F84A2000000        <1>     je .error   ;Unknown Error
   162                              <1> ;Now pack for the first portion/line after the for loop
   163                              <1> ;rsi points just after the FOR itself
   164 00000DFE 56                  <1>     push rsi    ;Save the first point after the FOR itself
   165 00000DFF E8F9F9FFFF          <1>     call findOtherExpressionsOnLine     ;Get the first : or ASCII NUL
   166 00000E04 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   167 00000E08 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   168 00000E0C 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   169 00000E0F 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   170 00000E11 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   171 00000E17 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   172 00000E1A 09C8                <1>     or eax, ecx     ;Add byte three to eax
   173 00000E1C 89C2                <1>     mov edx, eax    ;Save in edx
   174 00000E1E 48C1E228            <1>     shl rdx, 5*8    ;Shift three bytes to top of qword
   175 00000E22 5E                  <1>     pop rsi
   176                              <1> .initialSearch:
   177                              <1>     ;First look for a : or a ASCII NUL to leave the FOR part of the line
   178 00000E23 803E00              <1>     cmp byte [rsi], 0
   179 00000E26 740D                <1>     je .gotoNextLine
   180 00000E28 813E4E455854        <1>     cmp dword [rsi], "NEXT"
   181 00000E2E 7418                <1>     je .wordFound
   182 00000E30 48FFC6              <1>     inc rsi ;Now search up until the end of the line for a NEXT
   183                              <1>     ;"NEXT" found here!
   184 00000E33 EBEE                <1>     jmp short .initialSearch
   185                              <1> .gotoNextLine:
   186 00000E35 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Get pointer to next program line
   187 00000E39 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Now, when walking if it gives a value of -1, no NEXT found
   188 00000E40 7448                <1>     je .noNext
   189 00000E42 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Load pointer to string rsi
   190 00000E46 EBDB                <1>     jmp short .initialSearch
   191                              <1> .wordFound:
   192                              <1>     ;Here, word found! Huzzah! Now pack edx correctly
   193                              <1>     ;rsi points to the N in "NEXT "
   194 00000E48 E8B0F9FFFF          <1>     call findOtherExpressionsOnLine 
   195                              <1>     ;make rsi point to next expression on the line or the end of the line
   196 00000E4D 0FB74304            <1>     movzx eax, word [rbx + progLineBlock.wLineNum]  ;Get the line number
   197 00000E51 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine]  ;Load ptr to start of string in rsi
   198 00000E55 4829CE              <1>     sub rsi, rcx    ;Compute difference from start of string
   199 00000E58 89F1                <1>     mov ecx, esi    ;Should just be low byte of si so cl
   200 00000E5A 81E1FF000000        <1>     and ecx, 0FFh   ;Save only bottom byte just in case of garbage
   201 00000E60 C1E110              <1>     shl ecx, 2*8    ;Move to the third byte in the dword
   202 00000E63 09C8                <1>     or eax, ecx     ;Add byte three to eax
   203 00000E65 48C1E010            <1>     shl rax, 8*2    ;Shift three bytes to byte 4 of qword
   204 00000E69 4809C2              <1>     or rdx, rax     ;Add bytes [4:2] to rdx
   205                              <1>     ;Compute checksum now
   206 00000E6C 31C0                <1>     xor eax, eax
   207 00000E6E B05A                <1>     mov al, FORsig 
   208 00000E70 6689C2              <1>     mov dx, ax  ;Zero checksum byte
   209 00000E73 31C0                <1>     xor eax, eax
   210 00000E75 B908000000          <1>     mov ecx, 8  ;8 times
   211                              <1> .csumLoop:
   212                              <1>     ;Spin rdx 8 times adding each byte to al
   213 00000E7A 00D0                <1>     add al, dl
   214 00000E7C 48C1C208            <1>     rol rdx, 8  ;Rotate left by 8 bits
   215 00000E80 FFC9                <1>     dec ecx
   216 00000E82 75F6                <1>     jnz .csumLoop
   217 00000E84 F6D8                <1>     neg al ;Get twos compliment of sum (FFh - al)
   218 00000E86 88C6                <1>     mov dh, al  ;Save in checksum byte
   219                              <1> .exit:
   220 00000E88 5E                  <1>     pop rsi
   221 00000E89 C3                  <1>     ret
   222                              <1> .noNext:
   223 00000E8A 488D2D4F080000      <1>     lea rbp, noNext
   224 00000E91 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   224 00000E9A FF                  <1>
   225 00000E9B E9E8FFFFFF          <1>     jmp .exit
   226                              <1> .error:
   227 00000EA0 488D2D63080000      <1>     lea rbp, uknowner
   228 00000EA7 48BAFFFFFFFFFFFFFF- <1>     mov rdx, -1
   228 00000EB0 FF                  <1>
   229 00000EB1 E9D2FFFFFF          <1>     jmp .exit
   230                              <1> ;=======================================
   231                              <1> ;  ACTUAL CONTROL FLOW FUNCTIONS HERE  :
   232                              <1> ;=======================================
   233                              <1> ;All below functions return the line number in dx and the offset into the line
   234                              <1> ; to start reading at in byte three of edx
   235                              <1> goto:
   236                              <1> ;GOTO, works by replacing the address after the return address on the stack
   237                              <1> ;rsi points to first char AFTER function name
   238 00000EB6 E8DFF4FFFF          <1>     call spaceSkip  ;Skip all preceeding spaces
   239 00000EBB E82DF5FFFF          <1>     call handleAlgebraicExpression  ;Turn the expression into a number in ax
   240 00000EC0 0FB7D0              <1>     movzx edx, ax   ;Line number into dx, start at beginning of line
   241 00000EC3 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   242 00000ECA C3                  <1>     ret
   243                              <1> 
   244                              <1> gosub:
   245 00000ECB E87FFDFFFF          <1>     call retScan
   246 00000ED0 4881FAFFFFFFFF      <1>     cmp rdx, -1
   247 00000ED7 7436                <1>     je .error
   248 00000ED9 B901000000          <1>     mov ecx, gosubStruct_size/8
   249                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
   103                              <2> 
   104                              <2> 
   105                              <2> 
   106 00000EDE 58                  <2>  pop rax
   107 00000EDF 48C1E103            <2>  shl %1, 3
   108 00000EE3 4829CC              <2>  sub rsp, %1
   109 00000EE6 488D2D(50000000)    <2>  lea rbp, stack
   110 00000EED 4839EC              <2>  cmp rsp, rbp
   111 00000EF0 770C                <2>  ja .macroNotOverflow
   112 00000EF2 488D2D99070000      <2>  lea rbp, stkOvflw
   113 00000EF9 E9F6F1FFFF          <2>  jmp criticalError
   114                              <2> .macroNotOverflow:
   115                              <2> 
   116                              <2> 
   117 00000EFE 50                  <2>  push rax
   250 00000EFF 4889E5              <1>     mov rbp, rsp
   251 00000F02 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   252 00000F09 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   253                              <1>     ;rsi points just past the GOSUB
   254 00000F0D EBA7                <1>     jmp short goto ;Now behave like GOTO
   255                              <1> .error:
   256 00000F0F E9E0F1FFFF          <1>     jmp criticalError
   257                              <1> 
   258                              <1> return:
   259                              <1> ;First verify the GOSUB struc is on the stack
   260 00000F14 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   261 00000F17 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   262                              <1>     ;Read the qword on stack, verify it is a GOSUBstruc and passes checksum test
   263 00000F1E 488B5500            <1>     mov rdx, qword [rbp + gosubStruct.specQword]
   264 00000F22 80FAA5              <1>     cmp dl, GOSUBsig
   265 00000F25 752F                <1>     jne .noReturn
   266                              <1>     ;Now compute checksum to verify its not an accident
   267 00000F27 30C0                <1>     xor al, al
   268 00000F29 B908000000          <1>     mov ecx, 8
   269                              <1> .checksumTest:
   270 00000F2E 00D0                <1>     add al, dl
   271 00000F30 48C1CA08            <1>     ror rdx, 8
   272 00000F34 FFC9                <1>     dec ecx
   273 00000F36 75F6                <1>     jnz .checksumTest
   274 00000F38 84C0                <1>     test al, al     ;This should be 0
   275 00000F3A 751A                <1>     jnz .noReturn
   276                              <1>  ;Now we are truly in a RETURN
   277 00000F3C 48C1EA28            <1>     shr rdx, 5*8    ;Bring return information down to the lower three bytes
   278                              <1>     ;Clean the struc from the stack
   279 00000F40 B901000000          <1>     mov ecx, gosubStruct_size/8
   280                              <1>     cleanSpaceOnStack rcx
   121                              <2> 
   122 00000F45 58                  <2>  pop rax
   123 00000F46 48C1E103            <2>  shl %1, 3
   124 00000F4A 4801CC              <2>  add rsp, %1
   125 00000F4D 50                  <2>  push rax
   281 00000F4E 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   282 00000F55 C3                  <1>     ret
   283                              <1> .noReturn:
   284 00000F56 488D2D96070000      <1>     lea rbp, noReturn
   285 00000F5D E992F1FFFF          <1>     jmp criticalError
   286                              <1> forLoop:
   287                              <1> ;This saves the following struc on the stack
   288                              <1> ;------------Hi stack addr-------------
   289                              <1> ;stepValue (qword), default 1
   290                              <1> ;limitValue (qword), to which value do we loop
   291                              <1> ;ptr to counter variable (qword)
   292                              <1> ;Special qword:
   293                              <1> ; Byte 7 = Offset into the line for next instruction
   294                              <1> ; Bytes[6:5] = Line number of portion after FOR (either FOR line or line after FOR)
   295                              <1> ; Byte 4 = Offset into the line for next instruction
   296                              <1> ; Bytes[3:2] = Line number of portion after NEXT (either NEXT line or line after NEXT)
   297                              <1> ; Byte 1 = Parity check sum for the qword, makes the sum of the bytes in qword 0
   298                              <1> ; Byte 0 = FOR signature
   299                              <1> ;------------Low stack addr------------
   300                              <1> ;rsp -> Return address
   301                              <1>     ;First check we have a NEXT following this FOR
   302 00000F62 E87DFEFFFF          <1>     call nextScan
   303 00000F67 4881FAFFFFFFFF      <1>     cmp rdx, -1
   304 00000F6E 0F84F5000000        <1>     je .critError
   305                              <1>     ;Here we make space on the stack.
   306 00000F74 B904000000          <1>     mov ecx, forStruct_size/8
   307                              <1>     makeSpaceOnStack rcx  ;Make four qwords of space on the stack
   103                              <2> 
   104                              <2> 
   105                              <2> 
   106 00000F79 58                  <2>  pop rax
   107 00000F7A 48C1E103            <2>  shl %1, 3
   108 00000F7E 4829CC              <2>  sub rsp, %1
   109 00000F81 488D2D(50000000)    <2>  lea rbp, stack
   110 00000F88 4839EC              <2>  cmp rsp, rbp
   111 00000F8B 770C                <2>  ja .macroNotOverflow
   112 00000F8D 488D2DFE060000      <2>  lea rbp, stkOvflw
   113 00000F94 E95BF1FFFF          <2>  jmp criticalError
   114                              <2> .macroNotOverflow:
   115                              <2> 
   116                              <2> 
   117 00000F99 50                  <2>  push rax
   308 00000F9A 4889E5              <1>     mov rbp, rsp
   309 00000F9D 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   310 00000FA4 48895500            <1>     mov qword [rbp + forStruct.specQword], rdx  ;Move rdx into its place on the stack
   311 00000FA8 56                  <1>     push rsi   ;rsi points to first byte after FOR. The first word should now be a var
   312 00000FA9 B820544F20          <1>     mov eax, " TO " ;First find the TO and STEP values
   313                              <1> .flScanTo:
   314 00000FAE 803E00              <1>     cmp byte [rsi], 0   ;ASCII null w/o a TO? Syntax Error
   315 00000FB1 0F84AB000000        <1>     je .syntaxError
   316 00000FB7 803E3A              <1>     cmp byte [rsi], ":" ;Save for a next statement delimiter
   317 00000FBA 0F84A2000000        <1>     je .syntaxError
   318 00000FC0 3906                <1>     cmp dword [rsi], eax
   319 00000FC2 7405                <1>     je .flToFound
   320 00000FC4 48FFC6              <1>     inc rsi ;Go forwards by a byte
   321 00000FC7 EBE5                <1>     jmp short .flScanTo
   322                              <1> .flToFound:
   323                              <1>     ;rsi points to the preceeding space so add 3 to go to trailing space
   324 00000FC9 4881C603000000      <1>     add rsi, 3
   325 00000FD0 E8C5F3FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   326 00000FD5 E813F4FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the limit value
   327 00000FDA 48894510            <1>     mov qword [rbp + forStruct.limitValue], rax
   328                              <1>     ;rsi now points to the next word, this should be step, otherwise ignore the word
   329 00000FDE AD                  <1>     lodsd   ;Get the word in eax
   330 00000FDF 3D53544550          <1>     cmp eax, "STEP"
   331 00000FE4 754F                <1>     jne .defaultStep
   332                              <1>     ;Check it is a "STEP "
   333 00000FE6 AC                  <1>     lodsb
   334 00000FE7 3C20                <1>     cmp al, " "
   335 00000FE9 754A                <1>     jne .defaultStep
   336                              <1>     ;rsi points to a "STEP "
   337 00000FEB E8AAF3FFFF          <1>     call spaceSkip  ;Go to expression to evaluate
   338 00000FF0 E8F8F3FFFF          <1>     call handleAlgebraicExpression  ;Get in rax the step value
   339 00000FF5 48894518            <1>     mov qword [rbp + forStruct.stepValue], rax
   340                              <1> .flVariable:
   341 00000FF9 5E                  <1>     pop rsi ;Get back OG rsi position immediately after FOR
   342 00000FFA E89BF3FFFF          <1>     call spaceSkip ;Skip intermediate spaces
   343 00000FFF 56                  <1>     push rsi
   344 00001000 E87EF9FFFF          <1>     call variableAssignment ;Make the variable assignment, trashes rsi
   345 00001005 5E                  <1>     pop rsi ;rsi points to the start of the variable again
   346 00001006 E89AF3FFFF          <1>     call getVarNameLength
   347 0000100B E88F030000          <1>     call findVariable   ;Get the variable pointer in rbx
   348 00001010 48895D08            <1>     mov qword [rbp + forStruct.cntrPtr], rbx    ;Save variable pointer
   349                              <1>     ;Now check whether we should run the loop at all?
   350 00001014 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]
   351 00001018 488B4B04            <1>     mov rcx, qword [rbx + varBlock.qValue]  ;Get the variable value
   352 0000101C 488B5D10            <1>     mov rbx, qword [rbp + forStruct.limitValue]
   353                              <1>     ;if rcx >= rbx, branch to after NEXT
   354 00001020 4839D9              <1>     cmp rcx, rbx
   355 00001023 7D1A                <1>     jge .dontRunFor
   356 00001025 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   357 00001029 48C1EA28            <1>     shr rdx, 5*8    ;Upper bytes will be cleared, needed for the "branch"
   358                              <1> .exit:
   359                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   360 0000102D 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   361 00001034 C3                  <1>     ret
   362                              <1> .defaultStep:
   363 00001035 48C7451801000000    <1>     mov qword [rbp + forStruct.stepValue], 1
   364 0000103D EBBA                <1>     jmp short .flVariable
   365                              <1> .dontRunFor:
   366                              <1>     ;Move the bytes from the NEXT to edx 
   367 0000103F 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   368 00001043 48C1EA10            <1>     shr rdx, 2*8    ;Upper bytes will be cleared
   369 00001047 09D2                <1>     or edx, edx     ;This should zero the upper dword
   370                              <1>     ;Need to also reclaim the stack space
   371 00001049 B904000000          <1>     mov ecx, forStruct_size/8
   372                              <1>     cleanSpaceOnStack rcx
   121                              <2> 
   122 0000104E 58                  <2>  pop rax
   123 0000104F 48C1E103            <2>  shl %1, 3
   124 00001053 4801CC              <2>  add rsp, %1
   125 00001056 50                  <2>  push rax
   373 00001057 EBD4                <1>     jmp short .exit
   374                              <1> ;Errors
   375                              <1> .unknownError:
   376 00001059 488D2DAA060000      <1>     lea rbp, uknowner
   377 00001060 EB07                <1>     jmp short .critError
   378                              <1> .syntaxError:
   379 00001062 488D2DE8050000      <1>     lea rbp, syntax
   380                              <1> .critError:
   381                              <1>     ;called with rbp already pointing to error string
   382 00001069 E986F0FFFF          <1>     jmp criticalError
   383                              <1> 
   384                              <1> next:
   385                              <1>     ;Verify that the structure on the stack is a FOR structure
   386 0000106E 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   387 00001071 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   388                              <1>     ;Read the qword on stack, verify it is a FORstruct and passes checksum test
   389 00001078 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   390 0000107C 80FA5A              <1>     cmp dl, FORsig
   391 0000107F 7555                <1>     jne .noForNext
   392                              <1>     ;Now compute checksum to verify its not an accident
   393 00001081 30C0                <1>     xor al, al
   394 00001083 B908000000          <1>     mov ecx, 8
   395                              <1> .checksumTest:
   396 00001088 00D0                <1>     add al, dl
   397 0000108A 48C1EA08            <1>     shr rdx, 8
   398 0000108E FFC9                <1>     dec ecx
   399 00001090 75F6                <1>     jnz .checksumTest
   400 00001092 84C0                <1>     test al, al     ;This should be 0
   401 00001094 7540                <1>     jnz .noForNext
   402                              <1>     ;Now we are truly in a FOR loop
   403 00001096 488B5D08            <1>     mov rbx, qword [rbp + forStruct.cntrPtr]    ;Get variable pointer
   404 0000109A 488B4304            <1>     mov rax, qword [rbx + varBlock.qValue]      ;Get variable value
   405 0000109E 483B4510            <1>     cmp rax, qword [rbp + forStruct.limitValue] ;Compare current var value to limit
   406 000010A2 7D18                <1>     jge .noMoreLooping
   407 000010A4 48034518            <1>     add rax, qword [rbp + forStruct.stepValue]  ;Add the step
   408 000010A8 48894304            <1>     mov qword [rbx + varBlock.qValue], rax      ;Update the variable value
   409                              <1>     ;Now go back to line after FOR
   410 000010AC 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   411 000010B0 48C1EA28            <1>     shr rdx, 5*8    ;Move upper three bytes to lower three bytes of edx
   412                              <1> .exit:
   413                              <1>     ;Recall edx must have the correct three bytes in it from the special qword
   414 000010B4 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   415 000010BB C3                  <1>     ret
   416                              <1> .noMoreLooping:
   417                              <1>     ;No need to update the variable, it is already above
   418 000010BC 488B5500            <1>     mov rdx, qword [rbp + forStruct.specQword]
   419 000010C0 48C1EA10            <1>     shr rdx, 2*8    ;Move bytes 4:2 to lower three bytes of edx
   420 000010C4 09D2                <1>     or edx, edx     ;Remove upper bits
   421                              <1>     ;Need to also reclaim the stack space
   422 000010C6 B904000000          <1>     mov ecx, forStruct_size/8
   423                              <1>     cleanSpaceOnStack rcx
   121                              <2> 
   122 000010CB 58                  <2>  pop rax
   123 000010CC 48C1E103            <2>  shl %1, 3
   124 000010D0 4801CC              <2>  add rsp, %1
   125 000010D3 50                  <2>  push rax
   424 000010D4 EBDE                <1>     jmp short .exit
   425                              <1> .noForNext:
   426 000010D6 488D2DF0050000      <1>     lea rbp, noFor
   427 000010DD E912F0FFFF          <1>     jmp criticalError
   428                              <1> 
   429                              <1> while:
   430                              <1>     ;First check we have a WEND following this WHILE
   431 000010E2 E82BFCFFFF          <1>     call wendScan
   432 000010E7 4881FAFFFFFFFF      <1>     cmp rdx, -1
   433 000010EE 7464                <1>     je .critError
   434                              <1>     ;Here we make space on the stack.
   435 000010F0 B901000000          <1>     mov ecx, whileStruct_size/8
   436                              <1>     makeSpaceOnStack rcx  ;Make a qword of space on the stack
   103                              <2> 
   104                              <2> 
   105                              <2> 
   106 000010F5 58                  <2>  pop rax
   107 000010F6 48C1E103            <2>  shl %1, 3
   108 000010FA 4829CC              <2>  sub rsp, %1
   109 000010FD 488D2D(50000000)    <2>  lea rbp, stack
   110 00001104 4839EC              <2>  cmp rsp, rbp
   111 00001107 770C                <2>  ja .macroNotOverflow
   112 00001109 488D2D82050000      <2>  lea rbp, stkOvflw
   113 00001110 E9DFEFFFFF          <2>  jmp criticalError
   114                              <2> .macroNotOverflow:
   115                              <2> 
   116                              <2> 
   117 00001115 50                  <2>  push rax
   437 00001116 4889E5              <1>     mov rbp, rsp
   438 00001119 4881C508000000      <1>     add rbp, 8  ;Make rbp point to the base of the new struc
   439 00001120 48895500            <1>     mov qword [rbp + whileStruct.specQword], rdx  ;Move rdx into its place on the stack
   440                              <1>     ;rsi should point after the WHILE
   441 00001124 E8C4F2FFFF          <1>     call handleAlgebraicExpression  ;Get result of expression in rax
   442 00001129 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   443 0000112D 4885C0              <1>     test rax, rax   ;Zero is FALSE
   444 00001130 740C                <1>     jz .conditionFalse
   445 00001132 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   446                              <1> .exit:
   447 00001136 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   448 0000113D C3                  <1>     ret
   449                              <1> .conditionFalse:
   450                              <1>     ;If condition is false, jump to the instruction after WEND
   451                              <1>     ;Here we reclaim the space from the stack.
   452 0000113E B901000000          <1>     mov ecx, whileStruct_size/8
   453                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   121                              <2> 
   122 00001143 58                  <2>  pop rax
   123 00001144 48C1E103            <2>  shl %1, 3
   124 00001148 4801CC              <2>  add rsp, %1
   125 0000114B 50                  <2>  push rax
   454 0000114C 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   455 00001150 09D2                <1>     or edx, edx     ;Zero the rest of it
   456 00001152 EBE2                <1>     jmp short .exit
   457                              <1> .critError:
   458                              <1>     ;called with rbp already pointing to error string
   459 00001154 E99BEFFFFF          <1>     jmp criticalError
   460                              <1> wend:
   461                              <1>     ;Find the While on the WHILE line and evaluate the expression
   462                              <1>     ;if true, branch to the WHILE three bytes in specialQword
   463                              <1>     ;if false, branch to WEND three bytes in specialQword and clean stack
   464                              <1>     ;First verify we have a While structure on the stack
   465 00001159 4889E5              <1>     mov rbp, rsp    ;Dont need to save rbp so trash it
   466 0000115C 4881C508000000      <1>     add rbp, 8  ;Make it point to the base of the struc past the return address
   467 00001163 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]
   468 00001167 80FA55              <1>     cmp dl, WHILEsig
   469 0000116A 0F858D000000        <1>     jne .noWhile
   470                              <1>     ;Now compute checksum to verify its not an accident
   471 00001170 30C0                <1>     xor al, al
   472 00001172 B908000000          <1>     mov ecx, 8
   473                              <1> .checksumTest:
   474 00001177 00D0                <1>     add al, dl
   475 00001179 48C1CA08            <1>     ror rdx, 8
   476 0000117D FFC9                <1>     dec ecx
   477 0000117F 75F6                <1>     jnz .checksumTest
   478 00001181 84C0                <1>     test al, al     ;This should be 0
   479 00001183 7578                <1>     jnz .noWhile
   480                              <1>     ;Now we are truly in a WHILE loop
   481                              <1>     ;Search the While line for the WHILE keyword and evaluate the expression after it
   482                              <1>     ;rdx is as normal
   483 00001185 48C1EA28            <1>     shr rdx, 5*8    ;Get upper three bytes down low
   484 00001189 81E2FFFF0000        <1>     and edx, 0FFFFh ;Save only dx
   485 0000118F E87B020000          <1>     call searchForProgramLine
   486 00001194 4881FBFFFFFFFF      <1>     cmp rbx, -1
   487 0000119B 7454                <1>     je .error
   488 0000119D 488D730E            <1>     lea rsi, qword [rbx + progLineBlock.sLine] ;Point to start of string
   489                              <1> .whileScan:
   490 000011A1 803E00              <1>     cmp byte [rsi], 0   ;Are we at the end of the line
   491 000011A4 7457                <1>     je .noWhile ;If so, we have gotten to the end of the line without a while
   492 000011A6 488D3DE3F6FFFF      <1>     lea rdi, whileStr   ;Point to the while string in the table, 6 chars long
   493 000011AD B906000000          <1>     mov ecx, 6
   494                              <1> .scanning:
   495 000011B2 A6                  <1>     cmpsb
   496 000011B3 75EC                <1>     jne .whileScan
   497 000011B5 FFC9                <1>     dec ecx
   498 000011B7 75F9                <1>     jnz .scanning
   499                              <1>     ;Here is equal, rsi points past the space in "WHILE "
   500 000011B9 48FFCE              <1>     dec rsi
   501 000011BC E8D9F1FFFF          <1>     call spaceSkip  ;Skip all spaces
   502 000011C1 E827F2FFFF          <1>     call handleAlgebraicExpression  ;Get algebraic expression in rax
   503 000011C6 488B5500            <1>     mov rdx, qword [rbp + whileStruct.specQword]    ;Get special qword back into rdx
   504 000011CA 4885C0              <1>     test rax, rax
   505 000011CD 740C                <1>     jz .conditionFalse
   506 000011CF 48C1EA28            <1>     shr rdx, 5*8    ;Bring the upper three bytes down to eax
   507                              <1> .exit:
   508 000011D3 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   509 000011DA C3                  <1>     ret
   510                              <1> .conditionFalse:
   511                              <1>     ;If condition is false, go to the instruction after WEND
   512                              <1>     ;Here we reclaim the space from the stack.
   513 000011DB B901000000          <1>     mov ecx, whileStruct_size/8
   514                              <1>     cleanSpaceOnStack rcx  ;Clean a qword of space on the stack
   121                              <2> 
   122 000011E0 58                  <2>  pop rax
   123 000011E1 48C1E103            <2>  shl %1, 3
   124 000011E5 4801CC              <2>  add rsp, %1
   125 000011E8 50                  <2>  push rax
   515 000011E9 48C1EA10            <1>     shr rdx, 2*8    ;Bring bytes 4:2 down to bytes 2:0
   516 000011ED 09D2                <1>     or edx, edx     ;Zero the rest of it
   517 000011EF EBE2                <1>     jmp short .exit
   518                              <1> .error:
   519 000011F1 488D2D12050000      <1>     lea rbp, uknowner
   520 000011F8 E9F7EEFFFF          <1>     jmp criticalError
   521                              <1> .noWhile:
   522 000011FD 488D2DB4040000      <1>     lea rbp, noWhile
   523 00001204 E9EBEEFFFF          <1>     jmp criticalError
   524                              <1> 
   525                              <1> handleIf:
   526                              <1> ;Evaluate the string. The IF,THEN/GOTO,ELSE statement must ALL be on one line
   527                              <1> ;IF exp1 THEN statement ELSE statement
   528                              <1> ;IF exp1 GOTO linenumber ELSE statement
   529                              <1> ;rsi points to first char AFTER function name
   530 00001209 E88CF1FFFF          <1>     call spaceSkip
   531 0000120E E8DAF1FFFF          <1>     call handleAlgebraicExpression
   532 00001213 4885C0              <1>     test rax, rax  ;If this is 0, go to the else
   533 00001216 7425                <1>     jz .else
   534 00001218 E87DF1FFFF          <1>     call spaceSkip
   535 0000121D AD                  <1>     lodsd   ;Get the whole word, must be either "THEN " or "GOTO "
   536 0000121E 3D5448454E          <1>     cmp eax, "THEN"
   537 00001223 7442                <1>     je .hi0   ; Go past THEN, to process statement
   538 00001225 3D474F544F          <1>     cmp eax, "GOTO"
   539 0000122A 7569                <1>     jne .error
   540 0000122C 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   541 0000122F 7564                <1>     jne .error
   542 00001231 E980FCFFFF          <1>     jmp goto
   543                              <1> .candidatethen:
   544 00001236 803E20              <1>     cmp byte [rsi], " " ;is the next char a space?
   545 00001239 742C                <1>     je .hi0
   546 0000123B EB58                <1>     jmp short .error
   547                              <1> .else:
   548                              <1>     ;Search for the ELSE, it has to be preceeded with a space and have a space after
   549 0000123D 803E00              <1>     cmp byte [rsi], 0 ;Are we at end of line?
   550 00001240 7452                <1>     je .noElse
   551 00001242 803E3A              <1>     cmp byte [rsi], ":" ;Are we at end line segment?
   552 00001245 744D                <1>     je .noElse
   553 00001247 48FFC6              <1>     inc rsi
   554 0000124A 813E20454C53        <1>     cmp dword [rsi], " ELS"
   555 00001250 75EB                <1>     jne .else
   556 00001252 4881C604000000      <1>     add rsi, 4  ;Skip those four chars, we have a candidate
   557 00001259 66813E4520          <1>     cmp word [rsi], "E "
   558 0000125E 75DD                <1>     jne .else   ;If not equal failed to match pattern
   559 00001260 4881C602000000      <1>     add rsi, 2  ;Else its the ELSE we are looking for, move rsi to first space past it
   560                              <1> .hi0:
   561                              <1> ;Now we do the branchy stuff, branch to the same line just further down
   562 00001267 668B15(F40E0000)    <1>     mov dx, word [currentLine]
   563 0000126E E89C010000          <1>     call searchForProgramLine
   564 00001273 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Does the line not exist somehow?
   565 0000127A 7419                <1>     je .error
   566 0000127C 4889F0              <1>     mov rax, rsi    ;Save pointer in rax
   567 0000127F 488D4B0E            <1>     lea rcx, qword [rbx + progLineBlock.sLine] ;Get the difference in chars
   568 00001283 4829C8              <1>     sub rax, rcx
   569 00001286 24FF                <1>     and al, -1  ;Save only bottom byte as the difference should be less than 255
   570 00001288 C1E010              <1>     shl eax, 10h ;Shift to byte 3
   571 0000128B 09C2                <1>     or edx, eax ;Save the offset into byte 3
   572 0000128D 800D(D90E0000)08    <1>     or byte [stateByte], ctrlFlow   ;Set branch bit
   573                              <1> .noElse:
   574                              <1> ;If no else, simply return
   575 00001294 C3                  <1>     ret
   576                              <1> .error:
   577 00001295 488D1DB5030000      <1>     lea rbx, syntax
   578 0000129C E953EEFFFF          <1>     jmp criticalError
    12                                  %include "./src/MATH.ASM"
     1                              <1> decimalToHex:
     2                              <1>     ;Takes ASCII encoded decimal number and 
     3                              <1>     ;returns its hex value
     4                              <1>     ;Input: rsi = Start of numeric ONLY string
     5                              <1>     ;Output: rax = Number
     6                              <1>     ;        rsi = First non-numeric char past end of number
     7 000012A1 53                  <1>     push rbx
     8 000012A2 51                  <1>     push rcx
     9 000012A3 52                  <1>     push rdx
    10 000012A4 31DB                <1>     xor ebx, ebx    ;Start with rbx = 0
    11                              <1> .processDigits:    
    12 000012A6 AC                  <1>     lodsb           ;Get the first digit in al
    13 000012A7 2C30                <1>     sub al, 30h     ;Reduce to value
    14 000012A9 31D2                <1>     xor edx, edx    ;Clear for multiplication
    15 000012AB 3C0A                <1>     cmp al, 10      ;Digit valid? Propagte CF
    16 000012AD 480FB6C0            <1>     movzx rax, al   ;Clear upper bits
    17 000012B1 4893                <1>     xchg rax, rbx
    18 000012B3 730D                <1>     jnc .exit       ;Digit was not valid, exit
    19 000012B5 B90A000000          <1>     mov ecx, 10     ;Multiply result by 10
    20 000012BA 48F7E1              <1>     mul rcx
    21 000012BD 4801C3              <1>     add rbx, rax    ;Add the new digits
    22 000012C0 EBE4                <1>     jmp short .processDigits
    23                              <1> .exit:
    24 000012C2 48FFCE              <1>     dec rsi         ;rsi points to first non-digit
    25 000012C5 5A                  <1>     pop rdx
    26 000012C6 59                  <1>     pop rcx
    27 000012C7 5B                  <1>     pop rbx
    28 000012C8 C3                  <1>     ret
    29                              <1> 
    30                              <1> printdecimalword:
    31                              <1> ;Takes the qword in rax and prints its signed decimal representation
    32 000012C9 50                  <1>     push rax
    33 000012CA 53                  <1>     push rbx
    34 000012CB 488D3D(980E0000)    <1>     lea rdi, digitString   ;Use the default line as a buffer
    35                              <1>     ;Sanitise the digit buffer
    36 000012D2 57                  <1>     push rdi
    37 000012D3 51                  <1>     push rcx
    38 000012D4 50                  <1>     push rax
    39                              <1> 
    40 000012D5 B906000000          <1>     mov ecx, digitStringLen/8
    41 000012DA F348AB              <1>     rep stosq
    42 000012DD 58                  <1>     pop rax
    43 000012DE 59                  <1>     pop rcx
    44 000012DF 5F                  <1>     pop rdi
    45                              <1> 
    46 000012E0 50                  <1>     push rax    ;Save rax for the sign bit later
    47 000012E1 48D1C0              <1>     rol rax, 1  ;Test the sign bit
    48 000012E4 A801                <1>     test al, 1
    49 000012E6 48D1C8              <1>     ror rax, 1  ;Undo the roll
    50 000012E9 7403                <1>     jz .noCompliment
    51 000012EB 48F7D8              <1>     neg rax     ;Get the 2's compliment of rax
    52                              <1> ;Clear the sign bit, print the number from bits 62:0
    53                              <1> .noCompliment:
    54 000012EE 48D1E0              <1>     shl rax, 1  ;Go past the edge
    55 000012F1 48D1E8              <1>     shr rax, 1  ;Return zero extended
    56 000012F4 4881C72F000000      <1>     add rdi, digitStringLen - 1 ;Go to the end of the buffer
    57 000012FB FD                  <1>     std ;Reverse string ops
    58 000012FC 50                  <1>     push rax
    59 000012FD 30C0                <1>     xor al, al  ;Place delimiter
    60 000012FF AA                  <1>     stosb
    61 00001300 58                  <1>     pop rax
    62 00001301 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
    62 0000130A 00                  <1>
    63                              <1> .pdw0:
    64 0000130B 31D2                <1>     xor edx, edx
    65 0000130D 48F7F3              <1>     div rbx
    66 00001310 80C230              <1>     add dl, '0'
    67 00001313 80FA39              <1>     cmp dl, '9'
    68 00001316 7603                <1>     jbe .pdw1
    69 00001318 80C207              <1>     add dl, 'A'-'0'-10
    70                              <1> .pdw1:
    71 0000131B 50                  <1>     push rax
    72 0000131C 88D0                <1>     mov al, dl    ;Save remainder byte
    73 0000131E AA                  <1>     stosb   ;Store the byte and sub one from rdi
    74 0000131F 58                  <1>     pop rax
    75 00001320 4885C0              <1>     test rax, rax
    76 00001323 75E6                <1>     jnz .pdw0
    77                              <1> 
    78                              <1>     ;Now add a minus sign if sign bit set
    79 00001325 58                  <1>     pop rax ;Get the original for the sign bit
    80 00001326 48D1C0              <1>     rol rax, 1  ;Bring the sign bit low
    81 00001329 A801                <1>     test al, 1
    82 0000132B 7403                <1>     jz .printString
    83 0000132D B02D                <1>     mov al, "-"
    84 0000132F AA                  <1>     stosb   ;Store minus sign and decrement rdi
    85                              <1> .printString:
    86 00001330 FC                  <1>     cld ;Return string ops to normal
    87 00001331 48FFC7              <1>     inc rdi ;Skip the extra 0 that was inserted
    88 00001334 4889FD              <1>     mov rbp, rdi    ;Point rbp to the head of the string
    89 00001337 E8A0EEFFFF          <1>     call ttyOutString
    90 0000133C 5B                  <1>     pop rbx
    91 0000133D 58                  <1>     pop rax
    92 0000133E C3                  <1>     ret
    13                                  %include "./src/MEMORY.ASM"
     1                              <1> allocateBlock:
     2                              <1> ;Allocates a program memory block, the caller then fixes the specifics
     3                              <1> ;Output: rbx = Pointer to generic memory block, or -1 if memory full
     4                              <1> ;       Caller needs to fill in, block size, block type and specifics
     5 0000133F 52                  <1>     push rdx
     6                              <1> .ab0:
     7 00001340 488B1D(E20E0000)    <1>     mov rbx, qword [lastBlock]    ;Get the last block in the chain
     8 00001347 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;First allocation?
     9 0000134E 742F                <1>     je .firstAllocation
    10 00001350 C60374              <1>     mov byte [rbx + memBlock.bSignature], notLastMemBlock ;Make it not be the last
    11 00001353 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize] ;Goto end of block
    12 00001358 4801D3              <1>     add rbx, rdx    ;Move rbx over the previous last block
    13 0000135B 488B15(D00E0000)    <1>     mov rdx, qword [maxMemAddr]
    14 00001362 4839D3              <1>     cmp rbx, rdx ;rbx above maxmemory? 
    15 00001365 770C                <1>     ja .memoryFull
    16 00001367 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx  ;New last block
    17 0000136E C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    18                              <1> .exit:
    19 00001371 5A                  <1>     pop rdx
    20 00001372 C3                  <1>     ret
    21                              <1> .memoryFull:
    22 00001373 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    22 0000137C FF                  <1>
    23 0000137D EBF2                <1>     jmp short .exit
    24                              <1> .firstAllocation:
    25                              <1> ;Deal with first allocation
    26 0000137F 488D1D(00000000)    <1>     lea rbx, section.programArea.vstart   ;Get this as the head of the chain
    27 00001386 48891D(E20E0000)    <1>     mov qword [lastBlock], rbx
    28 0000138D 48891D(DA0E0000)    <1>     mov qword [mcbChain], rbx
    29 00001394 C60372              <1>     mov byte [rbx + memBlock.bSignature], lastMemBlock
    30 00001397 66C743010000        <1>     mov word [rbx + memBlock.wBlockSize], 0 ;Dummy block
    31 0000139D EBD2                <1>     jmp short .exit
    32                              <1> 
    33                              <1> findVariable:
    34                              <1> ;Input: rsi = Source string for variable name
    35                              <1> ;       ecx = Length of variable name (max 40)
    36                              <1> ;Output: rbx = ptr to varBlock/strBlock OR -1 if doesnt exist
    37 0000139F 50                  <1>     push rax
    38 000013A0 51                  <1>     push rcx
    39 000013A1 52                  <1>     push rdx
    40 000013A2 56                  <1>     push rsi
    41 000013A3 57                  <1>     push rdi
    42 000013A4 488B1D(DA0E0000)    <1>     mov rbx, qword [mcbChain]   ;Start of the chain
    43 000013AB 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Chain empty?
    44 000013B2 7446                <1>     je .exit
    45                              <1> .search:
    46 000013B4 807B0301            <1>     cmp byte [rbx + memBlock.bBlockType], varBlockType
    47 000013B8 7415                <1>     je .varFound    ;We found a numerical variable
    48 000013BA 807B0302            <1>     cmp byte [rbx + memBlock.bBlockType], datBlockType
    49 000013BE 741E                <1>     je .datFound    ;We found a string variable
    50                              <1> .invalid:
    51                              <1>     ;Are we at the end of the chain?
    52 000013C0 803B72              <1>     cmp byte [rbx + memBlock.bSignature], lastMemBlock
    53 000013C3 742B                <1>     je .varNotFound ;At the end of the chain and var not found? Error!
    54 000013C5 480FB75301          <1>     movzx rdx, word [rbx + memBlock.wBlockSize]
    55 000013CA 4801D3              <1>     add rbx, rdx    ;Goto next block
    56 000013CD EBE5                <1>     jmp short .search
    57                              <1> .varFound:
    58                              <1>     ;Compare to see the var is our var
    59 000013CF 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName] ;point rdi to the name string
    60 000013D3 51                  <1>     push rcx
    61 000013D4 56                  <1>     push rsi
    62 000013D5 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    63 000013D7 5E                  <1>     pop rsi
    64 000013D8 59                  <1>     pop rcx
    65 000013D9 75E5                <1>     jne .invalid
    66 000013DB F8                  <1>     clc
    67 000013DC EB1C                <1>     jmp short .exit
    68                              <1> .datFound:
    69 000013DE 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName] ;point rdi to the name string
    70 000013E5 51                  <1>     push rcx
    71 000013E6 56                  <1>     push rsi
    72 000013E7 F3A6                <1>     repe cmpsb  ;Compare one byte at a time
    73 000013E9 5E                  <1>     pop rsi
    74 000013EA 59                  <1>     pop rcx
    75 000013EB 75D3                <1>     jne .invalid
    76 000013ED F8                  <1>     clc
    77 000013EE EB0A                <1>     jmp short .exit
    78                              <1> .varNotFound:
    79 000013F0 48BBFFFFFFFFFFFFFF- <1>     mov rbx, -1
    79 000013F9 FF                  <1>
    80                              <1> .exit:
    81 000013FA 5F                  <1>     pop rdi
    82 000013FB 5E                  <1>     pop rsi
    83 000013FC 5A                  <1>     pop rdx
    84 000013FD 59                  <1>     pop rcx
    85 000013FE 58                  <1>     pop rax
    86 000013FF C3                  <1>     ret
    87                              <1> 
    88                              <1> findFirstLine:
    89                              <1> ;Output: rbx = Pointer to the first program block
    90                              <1> ;         dx = Number of the first line
    91 00001400 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
    92 00001407 668B15(F20E0000)    <1>     mov dx, word [firstLinNum]
    93 0000140E C3                  <1>     ret
    94                              <1> 
    95                              <1> ;FIRST SEARCH FOR A LINE NUMBER BEFORE INSERTING IT INTO THE CHAIN
    96                              <1> ;IF THE LINE NUMBER IS FOUND, REPLACE THE COMMAND STRING
    97                              <1> 
    98                              <1> searchForProgramLine:
    99                              <1> ;Walk the program chain looking to see if a line number exists. If it does,
   100                              <1> ; return a pointer to the block in rbx. If it doesn't, return -1 in rbx
   101                              <1> ;Input: dx = Line number
   102                              <1> ;Output: rbx = Pointer to program block 
   103 0000140F 488B1D(EA0E0000)    <1>     mov rbx, qword [firstLinPtr]
   104 00001416 4881FBFFFFFFFF      <1>     cmp rbx, -1
   105 0000141D 7413                <1>     je .lineFound
   106                              <1> .search:
   107 0000141F 66395304            <1>     cmp word [rbx + progLineBlock.wLineNum], dx ;Equal line numbers?
   108 00001423 740D                <1>     je .lineFound
   109 00001425 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr]   ;Walk chain
   110 00001429 4881FBFFFFFFFF      <1>     cmp rbx, -1
   111 00001430 75ED                <1>     jne .search ;Not -1? Keep searching
   112                              <1> .lineFound:
   113 00001432 C3                  <1>     ret
   114                              <1> 
   115                              <1> insertProgramLine:
   116                              <1> ;Walk the program chain looking for the biggest number less than our
   117                              <1> ; line number. Once we have reached the end of the chain, insert the block there, or
   118                              <1> ; if there is no block, then we are the last in the chain
   119                              <1> ;Input: rsi = New Program Block to be added
   120 00001433 50                  <1>     push rax
   121 00001434 53                  <1>     push rbx
   122 00001435 51                  <1>     push rcx
   123 00001436 52                  <1>     push rdx
   124 00001437 57                  <1>     push rdi
   125 00001438 E8C3FFFFFF          <1>     call findFirstLine  ;Get start of program in rbx and line number in dx
   126                              <1> ;First check if we should be the first line
   127                              <1> 
   128 0000143D 668B4E04            <1>     mov cx, word [rsi + progLineBlock.wLineNum] ;Save line number in cx
   129 00001441 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Empty program marker
   130 00001448 744D                <1>     je .first
   131 0000144A 6639D1              <1>     cmp cx, dx  ;If cx is below dx, then our entry is first
   132 0000144D 7248                <1>     jb .first    
   133                              <1> ;Use ax as the best line number and rdi as the pointer to that block
   134 0000144F 66B8FFFF            <1>     mov ax, -1  ;Marker to indicate no insertion
   135                              <1> .walk:
   136 00001453 48817B06FFFFFFFF    <1>     cmp qword [rbx + progLineBlock.qPtr], -1    ;We are at the end
   137 0000145B 7419                <1>     je .sort
   138 0000145D 488B5B06            <1>     mov rbx, qword [rbx + progLineBlock.qPtr] ;Walk chain in rbx
   139 00001461 663B4B04            <1>     cmp cx, word [rbx + progLineBlock.wLineNum]
   140 00001465 77EC                <1>     ja .walk    ;If line number is above my line number, keep walking
   141                              <1> .candidate:
   142                              <1>     ;If the new line number is below the old line number, reject
   143 00001467 663B4304            <1>     cmp ax, word [rbx + progLineBlock.wLineNum]
   144 0000146B 72E6                <1>     jb .walk
   145 0000146D 4889DF              <1>     mov rdi, rbx
   146 00001470 668B4304            <1>     mov ax, word [rbx + progLineBlock.wLineNum]
   147 00001474 EBDD                <1>     jmp short .walk
   148                              <1> .sort:
   149 00001476 66FFC0              <1>     inc ax  ;If no candidates, exit
   150 00001479 740E                <1>     jz .skipLink
   151                              <1>     ;rdi points to the previous line to link to
   152 0000147B 488B5706            <1>     mov rdx, qword [rdi + progLineBlock.qPtr]
   153 0000147F 48897706            <1>     mov qword [rdi + progLineBlock.qPtr], rsi   ;Insert self here
   154 00001483 48895606            <1>     mov qword [rsi + progLineBlock.qPtr], rdx   ;Link new block to next line
   155 00001487 EB20                <1>     jmp short .exit
   156                              <1> .skipLink:
   157 00001489 48897306            <1>     mov qword [rbx + progLineBlock.qPtr], rsi   ;Link rsi to last element in list
   158 0000148D 48C74606FFFFFFFF    <1>     mov qword [rsi + progLineBlock.qPtr], -1    ;End of chain marker
   159 00001495 EB12                <1>     jmp short .exit
   160                              <1> .first:
   161 00001497 488935(EA0E0000)    <1>     mov qword [firstLinPtr], rsi
   162 0000149E 66890D(F20E0000)    <1>     mov word [firstLinNum], cx
   163 000014A5 48895E06            <1>     mov qword [rsi + progLineBlock.qPtr], rbx   ;Put the old first line as second line
   164                              <1> .exit:
   165 000014A9 5F                  <1>     pop rdi
   166 000014AA 5A                  <1>     pop rdx
   167 000014AB 59                  <1>     pop rcx
   168 000014AC 5B                  <1>     pop rbx
   169 000014AD 58                  <1>     pop rax
   170 000014AE C3                  <1>     ret
   171                              <1> 
   172                              <1> makeEditInteger:
   173                              <1> ;Will make a variable if it is new name, or edit the value if it already exists
   174                              <1> ;Input: rsi = Var name
   175                              <1> ;       (e)cx = Length of varname, max 40 chars
   176                              <1> ;       rax = Value
   177 000014AF E8EBFEFFFF          <1>     call findVariable   ;rbx returned with var block or -1
   178 000014B4 4881FBFFFFFFFF      <1>     cmp rbx, -1
   179 000014BB 7405                <1>     je .newVar
   180 000014BD 48894304            <1>     mov qword [rbx + varBlock.qValue], rax
   181 000014C1 C3                  <1>     ret
   182                              <1> .newVar:
   183 000014C2 E878FEFFFF          <1>     call allocateBlock
   184 000014C7 4881FBFFFFFFFF      <1>     cmp rbx, -1
   185 000014CE 741E                <1>     je .error
   186 000014D0 48894304            <1>     mov qword [rbx + varBlock.qValue], rax  ;Save value
   187 000014D4 66894B01            <1>     mov word [rbx + varBlock.wBlockSize], cx    ;Save length of name
   188 000014D8 668143010C00        <1>     add word [rbx + varBlock.wBlockSize], varBlock_size ;Add full block size
   189 000014DE C6430301            <1>     mov byte [rbx + varBlock.bBlockType], varBlockType  ;Block type
   190 000014E2 57                  <1>     push rdi
   191 000014E3 488D7B0C            <1>     lea rdi, qword [rbx + varBlock.sVarName]
   192 000014E7 E87B000000          <1>     call strcpy ;Copy the string name into block buffer
   193 000014EC 5F                  <1>     pop rdi
   194 000014ED C3                  <1>     ret
   195                              <1> .error:
   196 000014EE 488D2D4C010000      <1>     lea rbp, noMem
   197 000014F5 E9FAEBFFFF          <1>     jmp criticalError
   198                              <1> makeEditString:
   199                              <1> ;Will make a string if it is new name, or replace the string. Strings are null termin
   200                              <1> ;Input: rsi = Var name
   201                              <1> ;       ecx = Length of varname, max 40 chars
   202                              <1> ;       rdx = Ptr to string itself
   203 000014FA 57                  <1>     push rdi
   204 000014FB 56                  <1>     push rsi
   205 000014FC 50                  <1>     push rax
   206 000014FD 53                  <1>     push rbx
   207 000014FE E89CFEFFFF          <1>     call findVariable   ;rbx returned with string block or -1
   208 00001503 4881FBFFFFFFFF      <1>     cmp rbx, -1
   209 0000150A 7528                <1>     jne .strcopy
   210 0000150C E82EFEFFFF          <1>     call allocateBlock
   211 00001511 4881FBFFFFFFFF      <1>     cmp rbx, -1
   212 00001518 742E                <1>     je .error
   213 0000151A 66894B01            <1>     mov word [rbx + stringBlock.wBlockSize], cx    ;Save length of name
   214 0000151E 668143010401        <1>     add word [rbx + stringBlock.wBlockSize], stringBlock_size ;Add full block size
   215 00001524 C6430302            <1>     mov byte [rbx + stringBlock.bBlockType], datBlockType  ;Block type
   216 00001528 488DBB04010000      <1>     lea rdi, qword [rbx + stringBlock.sVarName]
   217 0000152F E833000000          <1>     call strcpy ;Copy the string name into block buffer
   218                              <1> .strcopy:
   219 00001534 488D7B04            <1>     lea rdi, qword [rbx + stringBlock.string]   ;point to string space
   220 00001538 4889D6              <1>     mov rsi, rdx    ;Point rsi to the string itself
   221 0000153B E814000000          <1>     call terminatedstrcpy
   222 00001540 30C0                <1>     xor al, al
   223 00001542 AA                  <1>     stosb   ;Store the null delimiter
   224 00001543 5B                  <1>     pop rbx
   225 00001544 58                  <1>     pop rax
   226 00001545 5E                  <1>     pop rsi
   227 00001546 5F                  <1>     pop rdi
   228 00001547 C3                  <1>     ret
   229                              <1> .error:
   230 00001548 488D2DF2000000      <1>     lea rbp, noMem
   231 0000154F E9A0EBFFFF          <1>     jmp criticalError
   232                              <1> ;------------------------------------------------:
   233                              <1> ;  The below are misc memory related functions   :
   234                              <1> ;------------------------------------------------:
   235                              <1> terminatedstrcpy:
   236                              <1> ;rdi = Destination String
   237                              <1> ;rsi = Source String
   238                              <1> ;Copy a terminated string
   239 00001554 50                  <1>     push rax
   240                              <1> .copy:
   241 00001555 AC                  <1>     lodsb   ;Get char in al and inc rsi
   242 00001556 3C00                <1>     cmp al, 0
   243 00001558 740B                <1>     je .exit
   244 0000155A 3C3A                <1>     cmp al, ":"
   245 0000155C 7407                <1>     je .exit
   246 0000155E 3C22                <1>     cmp al, 22h ;Speechmark
   247 00001560 7403                <1>     je .exit
   248 00001562 AA                  <1>     stosb   ;Save char from al and inc rdi
   249 00001563 EBF0                <1>     jmp short .copy 
   250                              <1> .exit:
   251 00001565 58                  <1>     pop rax
   252 00001566 C3                  <1>     ret
   253                              <1> strcpy:
   254                              <1> ;rdi = Destination string
   255                              <1> ;rsi = Source string
   256                              <1> ;rcx = Number of Chars to copy
   257 00001567 57                  <1>     push rdi
   258 00001568 56                  <1>     push rsi
   259 00001569 51                  <1>     push rcx
   260 0000156A F3A4                <1>     rep movsb
   261 0000156C 59                  <1>     pop rcx
   262 0000156D 5E                  <1>     pop rsi
   263 0000156E 5F                  <1>     pop rdi
   264 0000156F C3                  <1>     ret
   265                              <1> strlen:
   266                              <1> ;Input: rsi = String start
   267                              <1> ;Output: rsi = String start
   268                              <1> ;        ecx = String length, inclusive of NULL char
   269 00001570 50                  <1>     push rax
   270 00001571 57                  <1>     push rdi
   271 00001572 4889F7              <1>     mov rdi, rsi
   272 00001575 B812120000          <1>     mov eax, 1212h  ;DOS strlen
   273 0000157A CD2F                <1>     int 2fh
   274 0000157C 5F                  <1>     pop rdi
   275 0000157D 58                  <1>     pop rax
   276 0000157E C3                  <1>     ret
   277                              <1> 
   278                              <1> memoryDetection:
   279                              <1> ;Input: rbp -> End of the memory arena
   280                              <1> ;Prints the number of bytes and sets up the internal vars 
   281 0000157F 48892D(D00E0000)    <1>     mov qword [maxMemAddr], rbp
   282 00001586 488D35(00000000)    <1>     lea rsi, section.programArea.vstart
   283 0000158D 488935(C80E0000)    <1>     mov qword [minMemAddr], rsi
   284 00001594 4829F5              <1>     sub rbp, rsi    ;Get the number of bytes in the memory arena
   285 00001597 4889E8              <1>     mov rax, rbp
   286 0000159A E82AFDFFFF          <1>     call printdecimalword
   287 0000159F C3                  <1>     ret
    14                                  %include "./data/BASICDAT.ASM"
     1 000015A0 4F6B0A0D00          <1> prompt  db "Ok",LF,CR,0
     2 000015A5 53435220494E544241- <1> mainmsg db "SCR INTBASIC/64 v0.1",LF,CR,0
     2 000015AE 5349432F3634207630- <1>
     2 000015B7 2E310A0D00          <1>
     3 000015BC 436F70797269676874- <1> cpyrt   db "Copyright (c) 2022, 2024 Yll Buzoku",LF,CR, "All rights reserved.",CR,LF,0
     3 000015C5 202863292032303232- <1>
     3 000015CE 2C203230323420596C- <1>
     3 000015D7 6C2042757A6F6B750A- <1>
     3 000015E0 0D416C6C2072696768- <1>
     3 000015E9 747320726573657276- <1>
     3 000015F2 65642E0D0A00        <1>
     4 000015F8 204279746573206672- <1> bytemsg db " Bytes free",LF,CR,0
     4 00001601 65650A0D00          <1>
     5 00001606 0A0D00              <1> crlf    db LF,CR,0
     6 00001609 4572726F720A0D00    <1> errmsg  db "Error",LF,CR,0
     7 00001611 303132333435363738- <1> numbers db "0123456789"
     7 0000161A 39                  <1>
     8                              <1> ;startVarChars db "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;Valid starting chars for a var name
     9                              <1> ;numStartVarChars equ $ - startVarChars
    10 0000161B 414243444546474849- <1> varChrs db "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%$" ;Valid inner chars for var name
    10 00001624 4A4B4C4D4E4F505152- <1>
    10 0000162D 535455565758595A30- <1>
    10 00001636 313233343536373839- <1>
    10 0000163F 2524                <1>
    11                              <1> numVarChars equ $ - varChrs
    12                              <1> ;% => Integer variable (8 bytes)
    13                              <1> ;! => Single-Precision, Unused and ignored
    14                              <1> ;# => Double-Precision, Unused and ignored
    15                              <1> ;$ => String variable
    16                              <1> 
    17                              <1> ;Error Messages
    18 00001641 4F7574206F66206D65- <1> noMem   db "Out of memory",LF,CR,0
    18 0000164A 6D6F72790A0D00      <1>
    19 00001651 53796E746178206572- <1> syntax  db "Syntax error",LF,CR,0
    19 0000165A 726F720A0D00        <1>
    20 00001660 54797065206D69736D- <1> typeError   db "Type mismatch",LF,CR,0
    20 00001669 617463680A0D00      <1>
    21 00001670 556E646566696E6564- <1> lineNoXist  db "Undefined line number",LF,CR,0
    21 00001679 206C696E65206E756D- <1>
    21 00001682 6265720A0D00        <1>
    22 00001688 427265616B20696E20- <1> breakmsg db "Break in ",0
    22 00001691 00                  <1>
    23 00001692 537461636B206F7665- <1> stkOvflw db "Stack overflow",LF,CR,0
    23 0000169B 72666C6F770A0D00    <1>
    24                              <1> 
    25 000016A3 5748494C4520776974- <1> noWend   db "WHILE without WEND", LF, CR, 0
    25 000016AC 686F75742057454E44- <1>
    25 000016B5 0A0D00              <1>
    26 000016B8 57454E442077697468- <1> noWhile  db "WEND without WHILE", LF, CR, 0
    26 000016C1 6F7574205748494C45- <1>
    26 000016CA 0A0D00              <1>
    27 000016CD 4E4558542077697468- <1> noFor    db "NEXT without FOR", LF, CR, 0
    27 000016D6 6F757420464F520A0D- <1>
    27 000016DF 00                  <1>
    28 000016E0 464F5220776974686F- <1> noNext   db "FOR without NEXT", LF, CR, 0
    28 000016E9 7574204E4558540A0D- <1>
    28 000016F2 00                  <1>
    29 000016F3 52455455524E207769- <1> noReturn db "RETURN without GOSUB", LF, CR, 0
    29 000016FC 74686F757420474F53- <1>
    29 00001705 55420A0D00          <1>
    30 0000170A 556E7072696E746162- <1> uknowner db "Unprintable error", LF, CR, 0
    30 00001713 6C65206572726F720A- <1>
    30 0000171C 0D00                <1>
    31                              <1> 
    32 0000171E 4469766973696F6E20- <1> divZer   db "Division by zero", LF, CR, 0
    32 00001727 6279207A65726F0A0D- <1>
    32 00001730 00                  <1>
    15                                  Segment dSeg nobits valign=1 vfollows=.text 
    16                                  %include "./data/BSS.ASM"
     1 00000000 <res 50h>           <1> oflowbuff   resq 10        ;10 Qwords of overflow buffer
     2                              <1> ;rsp should never get here when operating in a program.
     3                              <1> ;Only acceptable to be used when processing a line
     4 00000050 <res D40h>          <1> stack       resq 200h - 8 - 10*8  ;Save total 4Kb stack space
     5 00000D90 ????????????????    <1> stacktop    resq 1
     6                              <1> 
     7                              <1> maxLineLen  equ 256
     8 00000D98 <res 100h>          <1> inString    resb maxLineLen         ;256 character input string
     9                              <1> 
    10                              <1> ;This string is used for printing long numbers and saving
    11                              <1> ; the variable names for string comparisons
    12                              <1> digitStringLen  equ 48
    13 00000E98 <res 30h>           <1> digitString resb digitStringLen     
    14                              <1> 
    15 00000EC8 ????????????????    <1> minMemAddr  resq 1  ;Pointer from where to start allocating memory blocks
    16 00000ED0 ????????????????    <1> maxMemAddr  resq 1  ;Pointer to the byte past which we cannot allocate anything
    17                              <1> ;==============================================================================
    18                              <1> ;This is the SDA for each program and must be included in the program area
    19                              <1> ; once we add the ability to save the program to disk.
    20                              <1> ;==============================================================================
    21                              <1> 
    22                              <1> ;void* mcbChain, lastBlock, firstLinPtr = -1 => New program, empty entries
    23                              <1> 
    24 00000ED8 ??                  <1> strLen      resb 1  ;Counter for number of chars entered in string
    25 00000ED9 ??                  <1> stateByte   resb 1  ;Bit 0 => Break Set, stop processing after end of current line
    26 00000EDA ????????????????    <1> mcbChain    resq 1  ;Pointer to the start of the chain
    27 00000EE2 ????????????????    <1> lastBlock   resq 1  ;Pointer to the last block
    28 00000EEA ????????????????    <1> firstLinPtr resq 1  ;Pointer to the programs' first line 
    29 00000EF2 ????                <1> firstLinNum resw 1  ;Line number of the first line of the program
    30 00000EF4 ????                <1> currentLine resw 1  ;Currently being executed line number
    31                              <1> 
    32                              <1> bssLen: ;Needed to compute the resident portion load location
    17                                  Segment programArea align=1 vfollows=dSeg valign=16 ;Para aligned
    18                                  ENDOFPROGRAM:
